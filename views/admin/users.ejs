<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TPS - Users Management</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/css/buttons.bootstrap5.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/admin.css">
    
    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="/css/users.css">
    
    <style>
        /* DataTables Custom Styling */
        .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter {
            margin-bottom: 1rem;
        }
        
        .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            margin-top: 1rem;
        }
        
        .dt-buttons {
            margin-bottom: 1rem;
        }
        
        .dt-button {
            background: #007bff !important;
            border-color: #007bff !important;
            color: white !important;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            margin-right: 0.25rem;
        }
        
        .dt-button:hover {
            background: #0056b3 !important;
            border-color: #0056b3 !important;
        }
        
        .dataTables_filter input {
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            margin-left: 0.5rem;
        }
        
        .dataTables_length select {
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            margin: 0 0.5rem;
        }
        
        .page-link {
            color: #007bff;
        }
        
        .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
        }
        
        /* Custom filter styling */
        .custom-filters {
            background: #f8f9fa;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <%- include('./partials/sidebar', { currentPage: 'users' }) %>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Header -->
        <%- include('./partials/header', { 
            title: 'Users Management', 
            user: typeof user !== 'undefined' ? user : { name: 'User', email: '', avatar: 'U' } 
        }) %>

        <!-- Page Content -->
        <main class="dashboard-content">
            <div class="container-fluid px-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                        <i class="fas fa-plus me-2"></i>Add User
                    </button>
                </div>

                <!-- Custom Filters -->
                <div class="custom-filters">
                    <form id="filterForm" class="row g-3">
                        <div class="col-md-3">
                            <label for="roleFilter" class="form-label">Role</label>
                            <select class="form-select" id="roleFilter">
                                <option value="">All Roles</option>
                                <option value="admin">Admin</option>
                                <option value="hr">HR</option>
                                <option value="employee">Employee</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="statusFilter" class="form-label">Status</label>
                            <select class="form-select" id="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-primary me-2" id="applyFiltersBtn">
                                <i class="fas fa-filter me-1"></i>Apply
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="resetFiltersBtn">
                                <i class="fas fa-undo me-1"></i>Reset
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Users Table -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="usersTable">
                                <thead>
                                    <tr>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Created At</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="usersTableBody">
                                    <!-- Users will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addUserForm">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" minlength="8" required>
                            <div class="form-text">Password must be at least 8 characters long</div>
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Role</label>
                            <select class="form-select" id="role" required>
                                <option value="">Select Role</option>
                                <option value="admin">Admin</option>
                                <option value="hr">HR</option>
                                <option value="employee">Employee</option>
                            </select>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="isActive" checked>
                            <label class="form-check-label" for="isActive">Active</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-outline-primary" id="saveUserBtn">Save User</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <input type="hidden" id="editUserId">
                        <div class="mb-3">
                            <label for="editEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="editEmail" required>
                        </div>
                        <div class="mb-3">
                            <label for="editRole" class="form-label">Role</label>
                            <select class="form-select" id="editRole" required>
                                <option value="admin">Admin</option>
                                <option value="hr">HR</option>
                                <option value="employee">Employee</option>
                            </select>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="editIsActive">
                            <label class="form-check-label" for="editIsActive">Active</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-outline-primary" id="updateUserBtn">Update User</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reset Password Modal -->
    <div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="resetPasswordForm">
                        <input type="hidden" id="resetPasswordUserId">
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="newPassword" minlength="8" required>
                            <div class="form-text">Password must be at least 8 characters long</div>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="confirmPassword" minlength="8" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-outline-primary" id="resetPasswordBtn">Reset Password</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="confirmationModalBody">
                    <!-- Message will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery (required for DataTables) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/dataTables.bootstrap5.min.js"></script>
    <!-- DataTables Buttons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/buttons.print.min.js"></script>
    <!-- Axios -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>
    
    <!-- Custom JS -->
    <script src="/js/admin.js"></script>
    
    <!-- Page-specific JS -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get auth token and user from localStorage
            const authToken = localStorage.getItem('authToken');
            const currentUser = JSON.parse(localStorage.getItem('user'));
            
            if (!authToken || !currentUser) {
                window.location.href = '/login';
                return;
            }
            
            // Set up axios defaults
            axios.defaults.baseURL = '/api';
            axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;
            
            // DOM elements
            const usersTableBody = document.getElementById('usersTableBody');
            const filterForm = document.getElementById('filterForm');
            const roleFilter = document.getElementById('roleFilter');
            const statusFilter = document.getElementById('statusFilter');
            const applyFiltersBtn = document.getElementById('applyFiltersBtn');
            const resetFiltersBtn = document.getElementById('resetFiltersBtn');
            
            // Modal elements
            const addUserForm = document.getElementById('addUserForm');
            const saveUserBtn = document.getElementById('saveUserBtn');
            const editUserForm = document.getElementById('editUserForm');
            const updateUserBtn = document.getElementById('updateUserBtn');
            const resetPasswordForm = document.getElementById('resetPasswordForm');
            const resetPasswordBtn = document.getElementById('resetPasswordBtn');
            const confirmActionBtn = document.getElementById('confirmActionBtn');
            
            // DataTable variable
            let usersDataTable;
            
            // State variables
            let allUsers = [];
            
            // Initialize DataTable
            function initializeDataTable() {
                if (usersDataTable) {
                    usersDataTable.destroy();
                }
                
                usersDataTable = $('#usersTable').DataTable({
                    responsive: true,
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'excel',
                            text: '<i class="fas fa-file-excel me-1"></i> Excel',
                            title: 'Users List',
                            exportOptions: {
                                columns: [0, 1, 2, 3]
                            }
                        },
                        {
                            extend: 'pdf',
                            text: '<i class="fas fa-file-pdf me-1"></i> PDF',
                            title: 'Users List',
                            exportOptions: {
                                columns: [0, 1, 2, 3]
                            }
                        },
                        {
                            extend: 'print',
                            text: '<i class="fas fa-print me-1"></i> Print',
                            title: 'Users List',
                            exportOptions: {
                                columns: [0, 1, 2, 3]
                            }
                        },
                        {
                            extend: 'csv',
                            text: '<i class="fas fa-file-csv me-1"></i> CSV',
                            title: 'Users List',
                            exportOptions: {
                                columns: [0, 1, 2, 3]
                            }
                        }
                    ],
                    pageLength: 25,
                    lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                    order: [[3, 'desc']],
                    language: {
                        search: "Search users:",
                        lengthMenu: "Show _MENU_ entries",
                        info: "Showing _START_ to _END_ of _TOTAL_ users",
                        paginate: {
                            first: "First",
                            last: "Last",
                            next: "Next",
                            previous: "Previous"
                        }
                    },
                    columnDefs: [
                        {
                            targets: [1, 2], // Role and Status columns
                            className: 'text-center'
                        },
                        {
                            targets: [4], // Actions column
                            orderable: false,
                            searchable: false,
                            className: 'text-center'
                        }
                    ]
                });
            }
            
            // Initialize the page
            loadUsers();
            
            // Event listeners
            applyFiltersBtn.addEventListener('click', applyFilters);
            resetFiltersBtn.addEventListener('click', resetFilters);
            
            saveUserBtn.addEventListener('click', addUser);
            updateUserBtn.addEventListener('click', updateUser);
            resetPasswordBtn.addEventListener('click', resetPassword);
            confirmActionBtn.addEventListener('click', performConfirmedAction);
            
            // Apply custom filters
            function applyFilters() {
                const roleValue = roleFilter.value;
                const statusValue = statusFilter.value;
                
                if (usersDataTable) {
                    // Clear existing column filters
                    usersDataTable.columns().search('');
                    
                    // Apply role filter
                    if (roleValue) {
                        usersDataTable.column(1).search(roleValue);
                    }
                    
                    // Apply status filter
                    if (statusValue) {
                        const statusText = statusValue === 'active' ? 'Active' : 'Inactive';
                        usersDataTable.column(2).search(statusText);
                    }
                    
                    usersDataTable.draw();
                }
            }
            
            // Reset filters
            function resetFilters() {
                roleFilter.value = '';
                statusFilter.value = '';
                
                if (usersDataTable) {
                    usersDataTable.columns().search('').draw();
                }
            }
            
            // Load users
            function loadUsers() {
                showLoading();
                
                axios.get('/auth/users?page=1&limit=1000')
                    .then(response => {
                        const { users } = response.data;
                        allUsers = users;
                        renderUsersTable(users);
                    })
                    .catch(error => {
                        showError('Failed to load users. Please try again.');
                        console.error('Error loading users:', error);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Render users table
            function renderUsersTable(users) {
                usersTableBody.innerHTML = '';
                
                if (users.length === 0) {
                    usersTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4">No users found</td>
                        </tr>
                    `;
                    return;
                }
                
                users.forEach(user => {
                    const row = document.createElement('tr');
                    
                    // Determine badge class based on role
                    let roleBadgeClass = 'bg-secondary';
                    if (user.role === 'admin') roleBadgeClass = 'bg-danger';
                    if (user.role === 'hr') roleBadgeClass = 'bg-primary';
                    
                    // Status badge
                    const statusBadgeClass = user.isActive ? 'bg-success' : 'bg-warning';
                    const statusText = user.isActive ? 'Active' : 'Inactive';
                    
                    row.innerHTML = `
                        <td>${user.email}</td>
                        <td><span class="badge ${roleBadgeClass}">${user.role}</span></td>
                        <td><span class="badge ${statusBadgeClass}">${statusText}</span></td>
                        <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                        <td>
                            <div class="d-flex gap-2 justify-content-center">
                                <button class="btn btn-sm btn-outline-primary edit-btn" data-id="${user._id}" title="Edit User">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary reset-password-btn" data-id="${user._id}" title="Reset Password">
                                    <i class="fas fa-key"></i>
                                </button>
                                ${user.isActive ? `
                                    <button class="btn btn-sm btn-outline-danger deactivate-btn" data-id="${user._id}" title="Deactivate User">
                                        <i class="fas fa-user-slash"></i>
                                    </button>
                                ` : `
                                    <button class="btn btn-sm btn-outline-success activate-btn" data-id="${user._id}" title="Activate User">
                                        <i class="fas fa-user-check"></i>
                                    </button>
                                `}
                            </div>
                        </td>
                    `;
                    
                    usersTableBody.appendChild(row);
                });
                
                // Initialize or reinitialize DataTable
                initializeDataTable();
                
                // Add event listeners to action buttons
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', () => openEditModal(btn.dataset.id));
                });
                
                document.querySelectorAll('.reset-password-btn').forEach(btn => {
                    btn.addEventListener('click', () => openResetPasswordModal(btn.dataset.id));
                });
                
                document.querySelectorAll('.deactivate-btn').forEach(btn => {
                    btn.addEventListener('click', () => confirmDeactivateUser(btn.dataset.id));
                });
                
                document.querySelectorAll('.activate-btn').forEach(btn => {
                    btn.addEventListener('click', () => confirmActivateUser(btn.dataset.id));
                });
            }
            
            // Add new user
            function addUser() {
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;
                const role = document.getElementById('role').value;
                const isActive = document.getElementById('isActive').checked;
                
                if (!email || !password || !role) {
                    showError('Please fill all required fields');
                    return;
                }
                
                if (password.length < 8) {
                    showError('Password must be at least 8 characters long');
                    return;
                }
                
                showLoading();
                
                axios.post('/auth/users', {
                    email,
                    password,
                    role,
                    isActive
                })
                .then(() => {
                    showSuccess('User added successfully');
                    $('#addUserModal').modal('hide');
                    addUserForm.reset();
                    loadUsers();
                })
                .catch(error => {
                    const errorMessage = error.response?.data?.message || 'Failed to add user';
                    showError(errorMessage);
                })
                .finally(() => {
                    hideLoading();
                });
            }
            
            // Open edit modal
            function openEditModal(userId) {
                showLoading();
                
                axios.get(`/auth/profile`)
                    .then(response => {
                        const user = response.data.user;
                        
                        if (user.role !== 'admin') {
                            showError('Only admin can edit users');
                            return;
                        }
                        
                        return axios.get(`/auth/users/${userId}`);
                    })
                    .then(response => {
                        if (!response) return;
                        
                        const user = response.data.user;
                        document.getElementById('editUserId').value = user._id;
                        document.getElementById('editEmail').value = user.email;
                        document.getElementById('editRole').value = user.role;
                        document.getElementById('editIsActive').checked = user.isActive;
                        
                        $('#editUserModal').modal('show');
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.message || 'Failed to load user data';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Update user
            function updateUser() {
                const userId = document.getElementById('editUserId').value;
                const email = document.getElementById('editEmail').value;
                const role = document.getElementById('editRole').value;
                const isActive = document.getElementById('editIsActive').checked;
                
                if (!email || !role) {
                    showError('Please fill all required fields');
                    return;
                }
                
                showLoading();
                
                axios.put(`/auth/users/${userId}`, {
                    email,
                    role,
                    isActive
                })
                .then(() => {
                    showSuccess('User updated successfully');
                    $('#editUserModal').modal('hide');
                    loadUsers();
                })
                .catch(error => {
                    const errorMessage = error.response?.data?.message || 'Failed to update user';
                    showError(errorMessage);
                })
                .finally(() => {
                    hideLoading();
                });
            }
            
            // Open reset password modal
            function openResetPasswordModal(userId) {
                document.getElementById('resetPasswordUserId').value = userId;
                resetPasswordForm.reset();
                $('#resetPasswordModal').modal('show');
            }
            
            // Reset password
            function resetPassword() {
                const userId = document.getElementById('resetPasswordUserId').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                
                if (!newPassword || !confirmPassword) {
                    showError('Please fill all fields');
                    return;
                }
                
                if (newPassword.length < 8) {
                    showError('Password must be at least 8 characters long');
                    return;
                }
                
                if (newPassword !== confirmPassword) {
                    showError('Passwords do not match');
                    return;
                }
                
                showLoading();
                
                axios.post(`/auth/users/${userId}/reset-password`, {
                    newPassword
                })
                .then(() => {
                    showSuccess('Password reset successfully');
                    $('#resetPasswordModal').modal('hide');
                })
                .catch(error => {
                    const errorMessage = error.response?.data?.message || 'Failed to reset password';
                    showError(errorMessage);
                })
                .finally(() => {
                    hideLoading();
                });
            }
            
            // Confirm deactivate user
            function confirmDeactivateUser(userId) {
                document.getElementById('confirmationModalBody').innerHTML = `
                    <p>Are you sure you want to deactivate this user?</p>
                    <p class="text-muted">The user will no longer be able to log in.</p>
                `;
                
                confirmActionBtn.onclick = () => {
                    $('#confirmationModal').modal('hide');
                    deactivateUser(userId);
                };
                
                $('#confirmationModal').modal('show');
            }
            
            // Deactivate user
            function deactivateUser(userId) {
                showLoading();
                
                axios.delete(`/auth/users/${userId}`)
                    .then(() => {
                        showSuccess('User deactivated successfully');
                        loadUsers();
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.message || 'Failed to deactivate user';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Confirm activate user
            function confirmActivateUser(userId) {
                document.getElementById('confirmationModalBody').innerHTML = `
                    <p>Are you sure you want to activate this user?</p>
                    <p class="text-muted">The user will be able to log in again.</p>
                `;
                
                confirmActionBtn.onclick = () => {
                    $('#confirmationModal').modal('hide');
                    activateUser(userId);
                };
                
                $('#confirmationModal').modal('show');
            }
            
            // Activate user
            function activateUser(userId) {
                showLoading();
                
                axios.put(`/auth/users/${userId}`, {
                    isActive: true
                })
                    .then(() => {
                        showSuccess('User activated successfully');
                        loadUsers();
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.message || 'Failed to activate user';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Perform confirmed action
            function performConfirmedAction() {
                // This is handled by the individual confirmation functions
            }
            
            // Show loading state
            function showLoading() {
                // Implement your loading indicator
                document.body.style.cursor = 'wait';
            }
            
            // Hide loading state
            function hideLoading() {
                document.body.style.cursor = 'default';
            }
            
            // Show success message
            function showSuccess(message) {
                // Implement your success notification
                alert('Success: ' + message);
            }
            
            // Show error message
            function showError(message) {
                // Implement your error notification
                alert('Error: ' + message);
            }
        });
    </script>
</body>
</html>