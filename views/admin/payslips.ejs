<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TPS - Payslips Management</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- SweetAlert2 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.7.12/sweetalert2.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/css/buttons.bootstrap5.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/admin.css">
    
    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="/css/departments.css">
    <style>
        .payslip-card {
            transition: all 0.3s ease;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .payslip-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        .payslip-status {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
            border-radius: 50px;
        }
        .status-paid {
            background-color: #d1fae5;
            color: #065f46;
        }
        .status-pending {
            background-color: #fef3c7;
            color: #92400e;
        }
        .status-processing {
            background-color: #dbeafe;
            color: #1e40af;
        }
        .loading-spinner {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }
        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
        .month-selector {
            max-width: 200px;
        }
        
        /* Enhanced DataTables Styling */
        .dataTables_wrapper {
            padding: 0;
            margin-top: 1rem;
        }
        
        .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter {
            margin-bottom: 1rem;
            padding: 0 0.5rem;
        }
        
        .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            margin-top: 1rem;
            padding: 0.5rem;
        }
        
        .dt-buttons {
            margin-bottom: 1rem;
            padding: 0 0.5rem;
        }
        
        .dt-button {
            background: #007bff !important;
            border-color: #007bff !important;
            color: white !important;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            margin-right: 0.25rem;
            transition: all 0.2s ease;
        }
        
        .dt-button:hover {
            background: #0056b3 !important;
            border-color: #0056b3 !important;
            transform: translateY(-1px);
        }
        
        .dataTables_filter input {
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            margin-left: 0.5rem;
            transition: border-color 0.2s ease;
        }
        
        .dataTables_filter input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .dataTables_length select {
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            margin: 0 0.5rem;
            transition: border-color 0.2s ease;
        }
        
        .dataTables_length select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .page-link {
            color: #007bff;
            border: 1px solid #dee2e6;
            padding: 0.5rem 0.75rem;
            transition: all 0.2s ease;
        }
        
        .page-link:hover {
            color: #0056b3;
            background-color: #e9ecef;
            border-color: #dee2e6;
        }
        
        .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
        }
        
        /* Enhanced table styling */
        #payslipsTable {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
        }
        
        #payslipsTable thead th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            padding: 0.75rem;
            font-weight: 600;
            color: #495057;
            vertical-align: middle;
        }
        
        #payslipsTable tbody td {
            padding: 0.75rem;
            vertical-align: middle;
            border-top: 1px solid #dee2e6;
        }
        
        #payslipsTable tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.05);
        }
        
        /* Text alignment improvements */
        .text-end {
            text-align: right !important;
        }
        
        .text-center {
            text-align: center !important;
        }
        
        .text-start {
            text-align: left !important;
        }
        
        /* Avatar styling */
        .avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
        }
        
        /* Button group styling */
        .btn-group-sm > .btn, .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .dataTables_wrapper .dataTables_length,
            .dataTables_wrapper .dataTables_filter {
                float: none !important;
                margin-bottom: 0.5rem;
            }
            
            .dt-buttons {
                margin-bottom: 0.5rem;
            }
            
            .dataTables_wrapper .dataTables_info,
            .dataTables_wrapper .dataTables_paginate {
                float: none !important;
                text-align: center;
            }
            
            .month-selector {
                max-width: 100%;
            }
        }
        
        /* Custom card styling */
        .card {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        /* Header styling */
        h6 {
            font-weight: 600;
            color: #343a40;
        }
        
        /* Form control styling */
        .form-select-sm {
            height: calc(1.5em + 0.5rem + 2px);
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        
        /* Button styling */
        .btn-outline-primary {
            color: #007bff;
            border-color: #007bff;
        }
        
        .btn-outline-primary:hover {
            color: #fff;
            background-color: #007bff;
            border-color: #007bff;
        }
        
        .btn-outline-success {
            color: #28a745;
            border-color: #28a745;
        }
        
        .btn-outline-success:hover {
            color: #fff;
            background-color: #28a745;
            border-color: #28a745;
        }
        
        /* Input group styling */
        .input-group-sm > .form-control,
        .input-group-sm > .form-select {
            height: calc(1.5em + 0.5rem + 2px);
            padding: 0.25rem 0.5rem;
        }
        
        /* Label styling */
        .form-label {
            margin-bottom: 0;
            font-size: 0.875rem;
            color: #495057;
        }
    </style>
</head>
<body>
    <!-- Loading Spinner -->
    <div class="loading-spinner" id="loadingSpinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <%- include('./partials/sidebar', { currentPage: 'payslips' }) %>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Header -->
        <%- include('./partials/header', { 
            title: 'Payslips', 
            user: typeof user !== 'undefined' ? user : { name: 'User', email: '', avatar: 'U' } 
        }) %>

        <!-- Page Content -->
        <main class="dashboard-content">
            <div class="container-fluid px-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h6 class="mb-0">Employee Payslips</h6>
                    <div class="d-flex align-items-center gap-3">
                        <!-- Month Selector with label -->
                        <div class="d-flex align-items-center gap-2">
                            <label for="monthSelector" class="form-label mb-0 small fw-semibold">Select Month:</label>
                            <select class="form-select form-select-sm month-selector" id="monthSelector">
                                <!-- Options populated by JavaScript -->
                            </select>
                        </div>

                        <!-- Generate All Button -->
                        <button class="btn btn-sm btn-outline-primary" id="generateAllBtn">
                            <i class="fas fa-file-pdf me-1"></i> Generate All
                        </button>

                        <!-- Consolidated Payslip Download -->
                        <div class="d-flex align-items-center gap-2">
                            <label for="monthPicker" class="form-label mb-0 small fw-semibold">Employee Payslips Month:</label>
                            <div class="input-group input-group-sm" style="width: auto;">
                                <input type="month" class="form-control" id="monthPicker">
                                <button class="btn btn-sm btn-outline-success" id="downloadBtn">
                                    <i class="fas fa-download me-1"></i> Download All
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover table-striped" id="payslipsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th class="text-start">Employee</th>
                                        <th class="text-start">Payroll Month</th>
                                        <th class="text-end">Gross Pay</th>
                                        <th class="text-end">Deductions</th>
                                        <th class="text-end">Net Pay</th>
                                        <th class="text-center">Status</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="payslipsTableBody">
                                    <!-- Table content will be populated by JavaScript -->
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th class="text-start">Employee</th>
                                        <th class="text-start">Payroll Month</th>
                                        <th class="text-end">Gross Pay</th>
                                        <th class="text-end">Deductions</th>
                                        <th class="text-end">Net Pay</th>
                                        <th class="text-center">Status</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery (required for DataTables) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/dataTables.bootstrap5.min.js"></script>
    <!-- DataTables Buttons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.4.2/js/buttons.print.min.js"></script>
    <!-- Axios -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.7.12/sweetalert2.all.min.js"></script>
    
    <!-- Custom JS -->
    <script src="/js/admin.js"></script>
    
    <script>
        // Get token from localStorage
        const authToken = localStorage.getItem('authToken');
        if (!authToken) {
            window.location.href = '/login';
        }

        // Set up Axios defaults
        axios.interceptors.request.use(config => {
        const token = localStorage.getItem('authToken');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
        }, error => {
        return Promise.reject(error);
        });

        // Configure Axios defaults
        axios.defaults.baseURL = '/api';
        axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;
        axios.defaults.headers.post['Content-Type'] = 'application/json';

        // DOM Elements
        const loadingSpinner = document.getElementById('loadingSpinner');
        const monthSelector = document.getElementById('monthSelector');
        const generateAllBtn = document.getElementById('generateAllBtn');
        const payslipsTableBody = document.getElementById('payslipsTableBody');

        // DataTable variable
        let payslipsDataTable;

        // Current month in YYYY-MM format
        const currentMonth = new Date().toISOString().slice(0, 7);
        
        // Months for dropdown (last 12 months)
        function populateMonthSelector() {
            const months = [];
            const date = new Date();
            
            for (let i = 0; i < 12; i++) {
                const month = date.toISOString().slice(0, 7);
                months.push(month);
                date.setMonth(date.getMonth() - 1);
            }
            
            monthSelector.innerHTML = months.map(month => 
                `<option value="${month}" ${month === currentMonth ? 'selected' : ''}>
                    ${formatMonth(month)}
                </option>`
            ).join('');
        }
        
        function formatMonth(month) {
            const [year, monthNum] = month.split('-');
            const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                              'July', 'August', 'September', 'October', 'November', 'December'];
            return `${monthNames[parseInt(monthNum) - 1]} ${year}`;
        }
        
        // Show loading spinner
        function showLoading() {
            loadingSpinner.style.display = 'flex';
        }
        
        // Hide loading spinner
        function hideLoading() {
            loadingSpinner.style.display = 'none';
        }
        
        // Format currency
        function formatCurrency(amount, currency = 'MWK') {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: currency,
                minimumFractionDigits: 2
            }).format(amount).replace(currency, '').trim();
        }
        
        // Get status badge class
        function getStatusClass(status) {
            switch (status) {
                case 'paid': return 'status-paid';
                case 'pending': return 'status-pending';
                case 'processing': return 'status-processing';
                default: return 'status-pending';
            }
        }
        
        // Initialize DataTable
        function initializeDataTable() {
            if (payslipsDataTable) {
                payslipsDataTable.destroy();
            }
            
            payslipsDataTable = $('#payslipsTable').DataTable({
                responsive: true,
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                     '<"row"<"col-sm-12"tr>>' +
                     '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>' +
                     '<"row"<"col-sm-12 col-md-6"B><"col-sm-12 col-md-6">>',
                buttons: [
                    {
                        extend: 'excel',
                        text: '<i class="fas fa-file-excel me-1"></i> Excel',
                        title: `Payslips - ${formatMonth(monthSelector.value)}`,
                        className: 'btn-sm',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<i class="fas fa-file-pdf me-1"></i> PDF',
                        title: `Payslips - ${formatMonth(monthSelector.value)}`,
                        className: 'btn-sm',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        }
                    },
                    {
                        extend: 'print',
                        text: '<i class="fas fa-print me-1"></i> Print',
                        title: `Payslips - ${formatMonth(monthSelector.value)}`,
                        className: 'btn-sm',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        }
                    },
                    {
                        extend: 'csv',
                        text: '<i class="fas fa-file-csv me-1"></i> CSV',
                        title: `Payslips - ${formatMonth(monthSelector.value)}`,
                        className: 'btn-sm',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        }
                    }
                ],
                pageLength: 10,
                lengthMenu: [[5, 10, 25, 50, 100, -1], [5, 10, 25, 50, 100, "All"]],
                order: [[1, 'desc']],
                language: {
                    search: "Search:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                },
                columnDefs: [
                    {
                        targets: [0, 1], // Employee and Payroll Month columns
                        className: 'text-start'
                    },
                    {
                        targets: [2, 3, 4], // Gross Pay, Deductions, Net Pay columns
                        className: 'text-end'
                    },
                    {
                        targets: [5], // Status column
                        className: 'text-center'
                    },
                    {
                        targets: [6], // Actions column
                        orderable: false,
                        searchable: false,
                        className: 'text-center'
                    }
                ],
                initComplete: function() {
                    // Add search functionality to footer
                    this.api().columns().every(function() {
                        var column = this;
                        if (column.index() !== 6) { // Skip actions column
                            var input = document.createElement('input');
                            input.className = 'form-control form-control-sm';
                            input.placeholder = 'Search...';
                            $(input).appendTo($(column.footer()).empty())
                            .on('keyup change', function() {
                                column.search(this.value).draw();
                            });
                        }
                    });
                }
            });
        }
        
        // Fetch payslips for selected month
        async function fetchPayslips(month) {
            showLoading();
            try {
                const response = await axios.get('/payroll', {
                    params: { month }
                });
                
                renderPayslips(response.data.payrolls);
            } catch (error) {
                console.error('Error fetching payslips:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.response?.data?.error || 'Failed to fetch payslips'
                });
            } finally {
                hideLoading();
            }
        }
        
        function getCurrentUserRole() {
            try {
                const userData = JSON.parse(localStorage.getItem('user'));
                return userData?.role || 'employee';
            } catch {
                return 'employee';
            }
        }
        
        // Render payslips in table
        function renderPayslips(payslips) {
            const userRole = getCurrentUserRole();

            payslipsTableBody.innerHTML = payslips.map(payslip => `
                <tr>
                    <td class="text-start">
                        <div class="d-flex align-items-center">
                            <div class="avatar me-3">
                                ${payslip.employeeId?.personalInfo?.firstName?.charAt(0) || 'E'}
                            </div>
                            <div>
                                <h6 class="mb-0">${payslip.employeeId?.personalInfo?.firstName || ''} ${payslip.employeeId?.personalInfo?.lastName || ''}</h6>
                                <small class="text-muted">${payslip.employeeId?.employeeId || ''}</small>
                            </div>
                        </div>
                    </td>
                    <td class="text-start">${formatMonth(payslip.payrollMonth)}</td>
                    <td class="text-end">${formatCurrency(payslip.grossPay, payslip.currency)}</td>
                    <td class="text-end">${formatCurrency(payslip.deductions.total, payslip.currency)}</td>
                    <td class="text-end">${formatCurrency(payslip.netPay, payslip.currency)}</td>
                    <td class="text-center">
                        <span class="payslip-status ${getStatusClass(payslip.payment.status)}">
                            ${payslip.payment.status.toUpperCase()}
                        </span>
                    </td>
                    <td class="text-center">
                        <div class="d-flex gap-2 justify-content-center">
                            <button class="btn btn-sm btn-outline-success download-payslip" data-id="${payslip._id}" ${!payslip.payslip.generated ? 'disabled' : ''}>
                                <i class="fas fa-download"></i>
                            </button>
                            ${['admin', 'hr'].includes(userRole) ? `
                            <button class="btn btn-sm btn-outline-secondary generate-payslip" data-id="${payslip._id}" ${payslip.payslip.generated ? 'disabled' : ''}>
                                <i class="fas fa-file-pdf"></i>
                            </button>
                            ` : ''}
                        </div>
                    </td>
                </tr>
            `).join('');
            
            // Initialize or reinitialize DataTable
            initializeDataTable();
            
            // Add event listeners to buttons
            document.querySelectorAll('.download-payslip').forEach(btn => {
                btn.addEventListener('click', () => downloadPayslip(btn.dataset.id));
            });
            
            document.querySelectorAll('.generate-payslip').forEach(btn => {
                btn.addEventListener('click', () => generatePayslip(btn.dataset.id));
            });
        }
        
        // Download payslip
        async function downloadPayslip(payslipId) {
            showLoading();
            try {
                const token = localStorage.getItem('authToken');
                
                const response = await fetch(`/api/payroll/${payslipId}/payslip?download=true`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `payslip_${payslipId}.pdf`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                Swal.fire({
                    icon: 'success',
                    title: 'Payslip Downloaded',
                    text: 'Your payslip has been downloaded successfully.',
                    timer: 2000,
                    showConfirmButton: false
                });
                
            } catch (error) {
                console.error('Error downloading payslip:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.response?.data?.error || 'Failed to download payslip'
                });
            } finally {
                hideLoading();
            }
        }
        
        // Generate payslip
        async function generatePayslip(payslipId) {
            showLoading();
            try {
                const result = await axios.post(`/payroll/${payslipId}/payslip`);
                
                Swal.fire({
                    icon: 'success',
                    title: 'Payslip Generated',
                    text: result.data.message,
                    timer: 2000,
                    showConfirmButton: false
                });
                
                // Refresh the table
                fetchPayslips(monthSelector.value);
            } catch (error) {
                console.error('Error generating payslip:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.response?.data?.error || 'Failed to generate payslip'
                });
            } finally {
                hideLoading();
            }
        }
        
        // Generate all payslips for selected month
        async function generateAllPayslips() {
            const month = monthSelector.value;
            
            const result = await Swal.fire({
                title: 'Generate All Payslips?',
                text: `This will generate PDF payslips for all employees for ${formatMonth(month)}. Continue?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Generate All',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33'
            });
            
            if (result.isConfirmed) {
                showLoading();
                try {
                    const response = await axios.post('/payroll/payslips/generate-all', { month });
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Payslips Generated',
                        html: `
                            <p>Successfully generated ${response.data.successCount} payslips.</p>
                            ${response.data.failureCount > 0 ? 
                              `<p class="text-danger">Failed to generate ${response.data.failureCount} payslips.</p>` : ''}
                        `,
                        timer: 3000,
                        showConfirmButton: false
                    });
                    
                    // Refresh the table
                    fetchPayslips(month);
                } catch (error) {
                    console.error('Error generating all payslips:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.response?.data?.error || 'Failed to generate payslips'
                    });
                } finally {
                    hideLoading();
                }
            }
        }
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', () => {
            populateMonthSelector();
            fetchPayslips(currentMonth);
            
            // Event listeners
            monthSelector.addEventListener('change', () => {
                fetchPayslips(monthSelector.value);
            });
            
            generateAllBtn.addEventListener('click', generateAllPayslips);
        });
    </script>
    
    <script>
        document.getElementById('downloadBtn').addEventListener('click', async () => {
            const token = localStorage.getItem('authToken');
            const month = document.getElementById('monthPicker').value;

            if (!month) {
                Swal.fire({
                    icon: 'warning',
                    title: 'No Month Selected',
                    text: 'Please choose a month before downloading.'
                });
                return;
            }

            Swal.fire({
                title: 'Downloading...',
                text: 'Please wait while we generate your consolidated payslips.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            try {
                const response = await axios.get(
                    `/payroll/consolidated-payslips/${month}`,
                    {
                        headers: { Authorization: `Bearer ${token}` },
                        responseType: 'blob'
                    }
                );

                // Trigger download
                const blob = new Blob([response.data], { type: 'application/pdf' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `consolidated_payslips_${month}.pdf`;
                document.body.appendChild(a);
                a.click();
                a.remove();

                Swal.fire({
                    icon: 'success',
                    title: 'Download Complete',
                    text: `Payslips for ${month} downloaded successfully.`
                });
            } catch (err) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: err.response?.data?.error || 'Failed to download payslips.'
                });
            }
        });
    </script>
</body>
</html>