<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TPS - Employees Management</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/admin.css">

    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="/css/departments.css">

    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <style>
    
        /* Enhanced Employee Management Styles */
        .employee-card {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            border: 1px solid #e0e0e0;
        }

        .employee-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

        .employee-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #f0f2f5;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: bold;
            color: #4a6cf7;
        }

        .employee-status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .status-active {
            background-color: #e6f7ee;
            color: #28a745;
        }

        .status-inactive {
            background-color: #fef0f0;
            color: #dc3545;
        }

        .employee-actions .btn {
            padding: 4px 8px;
            font-size: 12px;
            border-radius: 4px;
            margin-right: 4px;
        }

        .form-section-title {
            font-size: 16px;
            font-weight: 600;
            color: #4a6cf7;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 8px;
            margin-bottom: 20px;
        }

        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .filter-section {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .table {
            margin-bottom: 0;
        }

        .table thead th {
            background-color: #f8f9fa;
            color: #495057;
            font-weight: 600;
            border-bottom-width: 1px;
            padding: 12px 8px;
            font-size: 13px;
        }

        .table tbody td {
            padding: 10px 8px;
            vertical-align: middle;
            font-size: 13px;
        }

        .table-hover tbody tr:hover {
            background-color: #f8f9fa;
        }

        .nav-tabs-custom .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            padding: 12px 20px;
            border-radius: 8px 8px 0 0;
            margin-right: 5px;
        }

        .nav-tabs-custom .nav-link.active {
            color: #4a6cf7;
            background-color: #f8f9fa;
            border-bottom: 2px solid #4a6cf7;
        }

        .modal-lg {
            max-width: 800px;
        }
        .employee-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #f0f2f5;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            color: #4a6cf7;
        }

        .employee-status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-active {
            background-color: #e6f7ee;
            color: #28a745;
        }

        .status-inactive {
            background-color: #fef0f0;
            color: #dc3545;
        }

        .employee-actions .btn {
            padding: 5px 10px;
            font-size: 13px;
            border-radius: 5px;
        }

        /* Enhanced Form Styles */
        .form-section-title {
            font-size: 16px;
            font-weight: 600;
            color: #4a6cf7;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 8px;
            margin-bottom: 20px;
        }

        .form-card {
            border-radius: 10px;
            border: 1px solid #e0e0e0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .form-card .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
            padding: 15px 20px;
        }

        .form-card .card-body {
            padding: 25px;
        }

        .form-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 8px;
        }

        .form-control,
        .form-select {
            border-radius: 6px;
            padding: 10px 15px;
            border: 1px solid #ced4da;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #4a6cf7;
            box-shadow: 0 0 0 0.2rem rgba(74, 108, 247, 0.25);
        }

        /* Enhanced Table Styles */
        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
        }

        .table {
            margin-bottom: 0;
        }

        .table thead th {
            background-color: #f8f9fa;
            color: #495057;
            font-weight: 600;
            border-bottom-width: 1px;
            padding: 12px 15px;
        }

        .table tbody td {
            padding: 12px 15px;
            vertical-align: middle;
        }

        .table-hover tbody tr:hover {
            background-color: #f8f9fa;
        }

        /* Enhanced Modal Styles */
        .employee-details-modal .modal-header {
            border-bottom: 1px solid #e0e0e0;
            padding: 15px 20px;
        }

        .employee-details-modal .modal-body {
            padding: 20px;
        }

        .employee-details-modal .detail-group {
            margin-bottom: 15px;
        }

        .employee-details-modal .detail-label {
            font-weight: 500;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .employee-details-modal .detail-value {
            font-weight: 400;
            color: #212529;
        }

        /* Custom Tabs */
        .nav-tabs-custom .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            padding: 12px 20px;
            border-radius: 8px 8px 0 0;
            margin-right: 5px;
        }

        .nav-tabs-custom .nav-link.active {
            color: #4a6cf7;
            background-color: #f8f9fa;
            border-bottom: 2px solid #4a6cf7;
        }

        .nav-tabs-custom .nav-link:hover:not(.active) {
            color: #4a6cf7;
            background-color: rgba(74, 108, 247, 0.05);
        }
 
:root {
    --sidebar-dark-blue: #0a1f3a;
    --sidebar-dark-blue-hover: #0f2a4d;
    --golden-yellow: #e86029;
    --golden-yellow-light: #f7d7b3;
    --bg-white: #ffffff;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --border-color: #e2e8f0;
    --sidebar-width: 280px;
    --header-height: 70px;
}

/* Replace hardcoded colors with CSS variables */
.employee-card {
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    border: 1px solid var(--border-color);
    background: var(--bg-white);
}

.employee-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
}

.employee-avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: var(--bg-white);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    color: var(--sidebar-dark-blue);
}

.employee-status-badge {
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
}

.status-active {
    background-color: var(--golden-yellow-light);
    color: var(--golden-yellow);
}

.status-inactive {
    background-color: var(--sidebar-dark-blue-hover);
    color: var(--bg-white);
}

.employee-actions .btn {
    padding: 5px 10px;
    font-size: 13px;
    border-radius: 5px;
}

.form-section-title {
    font-size: 16px;
    font-weight: 600;
    color: var(--sidebar-dark-blue);
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 8px;
    margin-bottom: 20px;
}

.stats-card {
    background: linear-gradient(135deg, var(--sidebar-dark-blue) 0%, var(--sidebar-dark-blue-hover) 100%);
    color: var(--bg-white);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
}

.filter-section {
    background: var(--bg-white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.table-responsive {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.table {
    margin-bottom: 0;
}

.table thead th {
    background-color: var(--bg-white);
    color: var(--text-primary);
    font-weight: 600;
    border-bottom-width: 1px;
    border-bottom: 1px solid var(--border-color);
    padding: 12px 8px;
    font-size: 13px;
}

.table tbody td {
    padding: 10px 8px;
    vertical-align: middle;
    font-size: 13px;
    color: var(--text-secondary);
}

.table-hover tbody tr:hover {
    background-color: var(--golden-yellow-light);
}

.nav-tabs-custom .nav-link {
    border: none;
    color: var(--text-secondary);
    font-weight: 500;
    padding: 12px 20px;
    border-radius: 8px 8px 0 0;
    margin-right: 5px;
}

.nav-tabs-custom .nav-link.active {
    color: var(--sidebar-dark-blue);
    background-color: var(--bg-white);
    border-bottom: 2px solid var(--sidebar-dark-blue);
}

.nav-tabs-custom .nav-link:hover:not(.active) {
    color: var(--sidebar-dark-blue);
    background-color: rgba(74, 108, 247, 0.05);
}

.modal-lg {
    max-width: 800px;
}

/* Enhanced Form Styles */
.form-card {
    border-radius: 10px;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    background: var(--bg-white);
}

.form-card .card-header {
    background-color: var(--bg-white);
    border-bottom: 1px solid var(--border-color);
    padding: 15px 20px;
}

.form-card .card-body {
    padding: 25px;
}

.form-label {
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 8px;
}

.form-control,
.form-select {
    border-radius: 6px;
    padding: 10px 15px;
    border: 1px solid var(--border-color);
    background: var(--bg-white);
    color: var(--text-primary);
}

.form-control:focus,
.form-select:focus {
    border-color: var(--sidebar-dark-blue);
    box-shadow: 0 0 0 0.2rem rgba(74, 108, 247, 0.25);
}

/* Enhanced Modal Styles */
.employee-details-modal .modal-header {
    border-bottom: 1px solid var(--border-color);
    padding: 15px 20px;
    background: var(--bg-white);
}

.employee-details-modal .modal-body {
    padding: 20px;
    background: var(--bg-white);
}

.employee-details-modal .detail-group {
    margin-bottom: 15px;
}

.employee-details-modal .detail-label {
    font-weight: 500;
    color: var(--text-secondary);
    margin-bottom: 5px;
}

.employee-details-modal .detail-value {
    font-weight: 400;
    color: var(--text-primary);
}
</style>
</head>

<body>
    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <%- include('./partials/sidebar', { currentPage: 'employees' }) %>

        <!-- Main Content -->
        <div class="main-content" id="mainContent">
            <!-- Header -->
            <%- include('./partials/header', { title: 'Employee Management' , user: typeof user !=='undefined' ? user :
                { name: 'User' , email: '' , avatar: 'U' } }) %>

                <!-- Page Content -->
                <main class="dashboard-content">
                    <div class="container-fluid ">

                             <!-- Statistics Section -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0" id="total-employees">0</h3>
                            <small>Total Employees</small>
                        </div>
                        <i class="fas fa-users fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0" id="active-employees">0</h3>
                            <small>Active Employees</small>
                        </div>
                        <i class="fas fa-user-check fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0" id="departments-count">0</h3>
                            <small>Departments</small>
                        </div>
                        <i class="fas fa-building fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0" id="avg-tenure">0</h3>
                            <small>Avg Tenure (Years)</small>
                        </div>
                        <i class="fas fa-clock fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>

                        <div class="row">
                            <!-- Main Content -->

                            <!-- Tab Navigation -->
                            <ul class="nav nav-tabs nav-tabs-custom mb-4" id="employeeTabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="employees-tab" data-bs-toggle="tab"
                                        data-bs-target="#employees" type="button" role="tab">
                                        <i class="fas fa-users me-2"></i>Employees
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="add-employee-tab" data-bs-toggle="tab"
                                        data-bs-target="#add-employee" type="button" role="tab">
                                        <i class="fas fa-user-plus me-2"></i>Add Employee
                                    </button>
                                </li>
                            </ul>

                            <!-- Tab Content -->
                            <div class="tab-content" id="employeeTabsContent">
                                <!-- Employees List Section -->
                                <div class="tab-pane fade show active" id="employees" role="tabpanel">
                <!-- Filters Section -->
                <div class="filter-section">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label small">Search</label>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" id="employee-search" placeholder="Search employees...">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small">Department</label>
                            <select class="form-select form-select-sm" id="filter-department">
                                <option value="">All Departments</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">Grade</label>
                            <select class="form-select form-select-sm" id="filter-grade">
                                <option value="">All Grades</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">Status</label>
                            <select class="form-select form-select-sm" id="filter-status">
                                <option value="">All Status</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button class="btn btn-sm btn-outline-primary me-2" id="apply-filters">
                                <i class="fas fa-filter"></i> Apply
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" id="clear-filters">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card employee-card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Employee Directory</h5>
                            <button class="btn btn-sm btn-outline-primary" id="refresh-btn">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle mb-0" id="employees-table">
                                <thead>
                                    <tr>
                                        <th width="8%">ID</th>
                                        <th width="22%">Employee</th>
                                        <th width="18%">Contact</th>
                                        <th width="15%">Department</th>
                                        <th width="12%">Grade</th>
                                        <th width="8%">Status</th>
                                        <th width="17%">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="employees-table-body">
                                    <tr>
                                        <td colspan="7" class="text-center py-4">
                                            <div class="spinner-border text-primary" role="status"></div>
                                            <p class="mt-2 mb-0">Loading employees...</p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <nav aria-label="Page navigation" class="p-3">
                            <ul class="pagination justify-content-center mb-0" id="employees-pagination">
                                <!-- Pagination will be loaded here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
                                <!-- Add Employee Section -->
                                <div class="tab-pane fade" id="add-employee" role="tabpanel">
                                    <div class="card form-card mb-4">
                                        <div class="card-header">
                                            <h5 class="mb-0">Add New Employee</h5>
                                        </div>
                                        <div class="card-body">
                                            <form id="add-employee-form">
                                                <div class="row mb-4">
                                                    <div class="col-12">
                                                        <h6 class="form-section-title">
                                                            <i class="fas fa-user-circle me-2"></i>Basic Information
                                                        </h6>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label for="user-select" class="form-label">Select User</label>
                                                        <select class="form-select select2" id="user-select" required style="width: 100%;"></select>
                                                            <option value="" selected disabled>Select a user</option>
                                                            <!-- Users will be loaded here -->
                                                        </select>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="employee-id" class="form-label">Employee ID</label>
                                                        <div class="input-group">
                                                            <input type="text" class="form-control" id="employee-id"
                                                                placeholder="Will be auto-generated">
                                                            <button class="btn btn-outline-secondary" type="button"
                                                                id="generate-id-btn">
                                                                <i class="fas fa-sync-alt"></i> Generate
                                                            </button>
                                                        </div>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="first-name" class="form-label">First Name</label>
                                                        <input type="text" class="form-control" id="first-name"
                                                            required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="middle-name" class="form-label">Middle Name</label>
                                                        <input type="text" class="form-control" id="middle-name">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="last-name" class="form-label">Last Name</label>
                                                        <input type="text" class="form-control" id="last-name" required>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="date-of-birth" class="form-label">Date of
                                                            Birth</label>
                                                        <input type="date" class="form-control" id="date-of-birth"
                                                            required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="gender" class="form-label">Gender</label>
                                                        <select class="form-select" id="gender" required>
                                                            <option value="" selected disabled>Select gender</option>
                                                            <option value="male">Male</option>
                                                            <option value="female">Female</option>
                                                            <option value="other">Other</option>
                                                            <option value="prefer_not_to_say">Prefer not to say</option>
                                                        </select>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="nationality" class="form-label">Nationality</label>
                                                        <input type="text" class="form-control" id="nationality"
                                                            required>
                                                    </div>
                                                </div>

                                                <!-- Address Information -->
                                                <div class="row mb-4">
                                                    <div class="col-12">
                                                        <h6 class="form-section-title">
                                                            <i class="fas fa-home me-2"></i>Address Information
                                                        </h6>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label for="street-address" class="form-label">Street
                                                            Address</label>
                                                        <input type="text" class="form-control" id="street-address"
                                                            required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="city" class="form-label">City</label>
                                                        <input type="text" class="form-control" id="city" required>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="state" class="form-label">State/Province</label>
                                                        <input type="text" class="form-control" id="state" required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="zip-code" class="form-label">Zip/Postal Code</label>
                                                        <input type="text" class="form-control" id="zip-code" required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="country" class="form-label">Country</label>
                                                        <input type="text" class="form-control" id="country"
                                                            value="United States" required>
                                                    </div>
                                                </div>

                                                <!-- Contact Information -->
                                                <div class="row mb-4">
                                                    <div class="col-12">
                                                        <h6 class="form-section-title">
                                                            <i class="fas fa-phone-alt me-2"></i>Contact Information
                                                        </h6>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label for="email" class="form-label">Email</label>
                                                        <input type="email" class="form-control" id="email" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="phone-number" class="form-label">Phone
                                                            Number</label>
                                                        <input type="tel" class="form-control" id="phone-number"
                                                            required>
                                                    </div>
                                                </div>

                                                <!-- Emergency Contact -->
                                                <div class="row mb-4">
                                                    <div class="col-12">
                                                        <h6 class="form-section-title">
                                                            <i class="fas fa-exclamation-triangle me-2"></i>Emergency
                                                            Contact
                                                        </h6>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="emergency-contact-name" class="form-label">Full
                                                            Name</label>
                                                        <input type="text" class="form-control"
                                                            id="emergency-contact-name" required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="emergency-contact-relationship"
                                                            class="form-label">Relationship</label>
                                                        <input type="text" class="form-control"
                                                            id="emergency-contact-relationship" required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="emergency-contact-phone" class="form-label">Phone
                                                            Number</label>
                                                        <input type="tel" class="form-control"
                                                            id="emergency-contact-phone" required>
                                                    </div>
                                                </div>

                                                <!-- Employment Information -->
                                                <div class="row mb-4">
                                                    <div class="col-12">
                                                        <h6 class="form-section-title">
                                                            <i class="fas fa-briefcase me-2"></i>Employment Information
                                                        </h6>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="department" class="form-label">Department</label>
                                                        <select class="form-select" id="department" required>
                                                            <option value="" selected disabled>Select department
                                                            </option>
                                                            <!-- Departments will be loaded here -->
                                                        </select>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="position" class="form-label">Position</label>
                                                        <select class="form-select" id="position" required>
                                                            <option value="" selected disabled>Select position</option>
                                                            <!-- Positions will be loaded here -->
                                                        </select>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="grade" class="form-label">Grade</label>
                                                        <select class="form-select" id="grade" required>
                                                            <option value="" selected disabled>Select grade</option>
                                                            <!-- Grades will be loaded here -->
                                                        </select>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label for="salary" class="form-label">Salary</label>
                                                        <div class="input-group">
                                                            <span class="input-group-text">$</span>
                                                            <input type="number" class="form-control" id="salary"
                                                                min="0" step="0.01" required>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="employment-type" class="form-label">Employment
                                                            Type</label>
                                                        <select class="form-select" id="employment-type" required>
                                                            <option value="" selected disabled>Select employment type
                                                            </option>
                                                            <option value="full-time">Full-time</option>
                                                            <option value="part-time">Part-time</option>
                                                            <option value="contract">Contract</option>
                                                            <option value="temporary">Temporary</option>
                                                            <option value="intern">Intern</option>
                                                        </select>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label for="start-date" class="form-label">Start Date</label>
                                                        <input type="date" class="form-control" id="start-date"
                                                            required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="probation-period" class="form-label">Probation
                                                            Period</label>
                                                        <div class="input-group">
                                                            <input type="number" class="form-control"
                                                                id="probation-period" min="1" value="3">
                                                            <span class="input-group-text">months</span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Bank Information -->
                                                <div class="row mb-4">
                                                    <div class="col-12">
                                                        <h6 class="form-section-title">
                                                            <i class="fas fa-university me-2"></i>Bank Information
                                                        </h6>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="bank-name" class="form-label">Bank Name</label>
                                                        <input type="text" class="form-control" id="bank-name" required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="account-name" class="form-label">Account
                                                            Name</label>
                                                        <input type="text" class="form-control" id="account-name"
                                                            required>
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="account-number" class="form-label">Account
                                                            Number</label>
                                                        <input type="text" class="form-control" id="account-number"
                                                            required>
                                                    </div>

                                                    <div class="col-md-4 mb-3">
                                                        <label for="routing-number" class="form-label">Routing
                                                            Number</label>
                                                        <input type="text" class="form-control" id="routing-number">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="bank-code" class="form-label">Bank Code</label>
                                                        <input type="text" class="form-control" id="bank-code">
                                                    </div>
                                                    <div class="col-md-4 mb-3">
                                                        <label for="iban" class="form-label">IBAN</label>
                                                        <input type="text" class="form-control" id="iban">
                                                    </div>
                                                </div>

                                                <div class="d-flex justify-content-end border-top pt-4">
                                                    <button type="button" class="btn btn-outline-secondary me-3 px-4"
                                                        id="cancel-add-employee">
                                                        Cancel
                                                    </button>
                                                    <button type="submit" class="btn btn-primary px-4"
                                                        id="submit-employee">
                                                        <span id="submit-employee-text">Add Employee</span>
                                                        <span class="spinner-border spinner-border-sm d-none"
                                                            id="submit-employee-spinner"></span>
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>

                  <!-- Employee Details Modal -->
    <div class="modal fade" id="employeeDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Employee Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="employeeDetailsModalBody">
                    <!-- Content will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Employee Modal -->
    <div class="modal fade" id="editEmployeeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Employee</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="edit-employee-form">
                        <input type="hidden" id="edit-employee-id">
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">First Name</label>
                                <input type="text" class="form-control" id="edit-first-name" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="edit-last-name" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" id="edit-email" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone</label>
                                <input type="tel" class="form-control" id="edit-phone" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Department</label>
                                <select class="form-select" id="edit-department" required>
                                    <option value="">Select department</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Grade</label>
                                <select class="form-select" id="edit-grade" required>
                                    <option value="">Select grade</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Salary</label>
                                <div class="input-group">
                                    <span class="input-group-text">MK</span>
                                    <input type="number" class="form-control" id="edit-salary" step="0.01" required>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-select" id="edit-status" required>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-employee-changes">
                        <span id="save-changes-text">Save Changes</span>
                        <span class="spinner-border spinner-border-sm d-none" id="save-changes-spinner"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
                <!-- Bootstrap JS -->
                <script
                    src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
                <!-- Org Chart JS -->
                <script src="https://cdnjs.cloudflare.com/ajax/libs/orgchart/3.8.1/js/jquery.orgchart.min.js"></script>

                <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                <!-- SweetAlert2 -->
                <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                <!-- Axios -->
                <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
                <!-- Moment.js -->
                <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

                <script>
                    // Update your JavaScript to handle tab changes if needed
                    $(document).ready(function () {
                        // Initialize tabs
                        const tabEl = document.querySelector('button[data-bs-toggle="tab"]');
                        if (tabEl) {
                            tabEl.addEventListener('shown.bs.tab', function (event) {
                                const activeTab = event.target.getAttribute('data-bs-target');
                                if (activeTab === '#employees') {
                                    loadEmployees();
                                }
                            });
                        }

                        // Your existing JavaScript code...
                    });
                </script>
                <script>
                    // Global variables
                    let currentPage = 1;
                    const itemsPerPage = 10;
                    let totalEmployees = 0;
                    let departments = [];
                    let positions = [];
                    let grades = [];
                    let users = [];

                    // Initialize the page
                    $(document).ready(function () {
                        // Check if user is logged in
                        const authToken = localStorage.getItem('authToken');
                        if (!authToken) {
                            window.location.href = '/login.html';
                            return;
                        }

                        // Set up Axios defaults
                        axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;

                        // Load initial data
                        loadEmployees();
                        loadDepartments();
                        loadPositions();
                        loadGrades();
                        loadUsers();

                        // Set up event listeners
                        $('#employees-link').click(function (e) {
                            e.preventDefault();
                            showEmployeesSection();
                        });

                        $('#add-employee-link').click(function (e) {
                            e.preventDefault();
                            showAddEmployeeSection();
                        });

                        $('#refresh-btn').click(function () {
                            loadEmployees();
                        });

                        $('#cancel-add-employee').click(function () {
                            showEmployeesSection();
                        });

                        $('#employee-search').on('input', function () {
                            loadEmployees();
                        });

                        $('#department').change(function () {
                            updatePositionsDropdown();
                        });

                        $('#position').change(function () {
                            updateGradeDropdown();
                            updateSalaryField();
                        });

                        $('#grade').change(function () {
                            updateSalaryField();
                        });

                        $('#add-employee-form').submit(function (e) {
                            e.preventDefault();
                            addEmployee();
                        });

                        // Generate employee ID button
                        $('#generate-id-btn').click(function () {
                            $('#employee-id').val(generateEmployeeId());
                        });
                    });

                    // Function to show employees section
                    function showEmployeesSection() {
                        $('#page-title').text('Employee Management');
                        $('#employees-section').removeClass('d-none');
                        $('#add-employee-section').addClass('d-none');
                    }

                    // Function to show add employee section
                    function showAddEmployeeSection() {
                        $('#page-title').text('Add New Employee');
                        $('#employees-section').addClass('d-none');
                        $('#add-employee-section').removeClass('d-none');
                    }
                    
        // Load employees with filters
        function loadEmployees(page = 1) {
            currentPage = page;
            const params = {
                page: page,
                limit: itemsPerPage,
                search: $('#employee-search').val() || '',
                departmentId: $('#filter-department').val() || '',
                gradeId: $('#filter-grade').val() || '',
                status: $('#filter-status').val() || 'active'
            };

            showLoading();

            axios.get('/api/employees', { params })
                .then(response => {
                    const { data, stats, pagination } = response.data;
                    renderEmployeesTable(data);
                    renderPagination(pagination);
                    updateStatistics(stats);
                })
                .catch(error => {
                    console.error('Error loading employees:', error);
                    showError('Failed to load employees');
                });
        }

        // Render employees table
        function renderEmployeesTable(employees) {
            const tbody = $('#employees-table-body');
            tbody.empty();

            if (!employees || employees.length === 0) {
                tbody.append(`
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <p class="mb-0">No employees found</p>
                        </td>
                    </tr>
                `);
                return;
            }

            employees.forEach(employee => {
                const firstName = employee.personalInfo?.firstName || '';
                const lastName = employee.personalInfo?.lastName || '';
                const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
                
                // Safely access nested properties
                const department = employee.employmentInfo?.departmentId?.name || 'N/A';
                const grade = employee.employmentInfo?.gradeId?.name || 'N/A';
                const position = employee.employmentInfo?.positionId?.name || 'N/A';
                const status = employee.employmentInfo?.status || 'inactive';
                const email = employee.personalInfo?.email || 'N/A';
                const phone = employee.personalInfo?.phoneNumber || 'N/A';

                tbody.append(`
                    <tr>
                        <td>
                            <small class="text-muted">${employee.employeeId || 'N/A'}</small>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="employee-avatar me-2">${initials}</div>
                                <div>
                                    <div class="fw-semibold">${firstName} ${lastName}</div>
                                    <small class="text-muted">${position}</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="small">
                                <div class="text-muted">${email}</div>
                                <div>${phone}</div>
                            </div>
                        </td>
                        <td>
                            <span class="badge bg-light text-dark">${department}</span>
                        </td>
                        <td>
                            <span class="badge bg-info text-white">${grade}</span>
                        </td>
                        <td>
                            <span class="employee-status-badge ${status === 'active' ? 'status-active' : 'status-inactive'}">
                                ${status.charAt(0).toUpperCase() + status.slice(1)}
                            </span>
                        </td>
                        <td class="employee-actions">
                            <button class="btn btn-sm btn-outline-primary" onclick="viewEmployee('${employee._id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-success" onclick="editEmployee('${employee._id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            ${status === 'active' ? `
                                <button class="btn btn-sm btn-outline-danger" onclick="deactivateEmployee('${employee._id}')">
                                    <i class="fas fa-user-times"></i>
                                </button>
                            ` : ''}
                        </td>
                    </tr>
                `);
            });
        }

        // View employee details
        function viewEmployee(employeeId) {
            axios.get(`/api/employees/${employeeId}`)
                .then(response => {
                    const employee = response.data.data;
                    displayEmployeeDetails(employee);
                })
                .catch(error => {
                    console.error('Error fetching employee:', error);
                    Swal.fire('Error', 'Failed to load employee details', 'error');
                });
        }

        // Display employee details in modal
        function displayEmployeeDetails(employee) {
            const modalBody = $('#employeeDetailsModalBody');
            const firstName = employee.personalInfo?.firstName || '';
            const lastName = employee.personalInfo?.lastName || '';
            const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();

            modalBody.html(`
                <div class="row">
                    <div class="col-md-4 text-center mb-4">
                        <div class="employee-avatar mx-auto mb-3" style="width: 80px; height: 80px; font-size: 32px;">${initials}</div>
                        <h5>${firstName} ${lastName}</h5>
                        <div class="badge bg-primary">${employee.employmentInfo?.positionId?.name || 'N/A'}</div>
                    </div>
                    <div class="col-md-8">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <small class="text-muted">Employee ID</small>
                                    <div class="fw-semibold">${employee.employeeId || 'N/A'}</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Department</small>
                                    <div class="fw-semibold">${employee.employmentInfo?.departmentId?.name || 'N/A'}</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Grade</small>
                                    <div class="fw-semibold">${employee.employmentInfo?.gradeId?.name || 'N/A'}</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <small class="text-muted">Email</small>
                                    <div class="fw-semibold">${employee.personalInfo?.email || 'N/A'}</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Phone</small>
                                    <div class="fw-semibold">${employee.personalInfo?.phoneNumber || 'N/A'}</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Status</small>
                                    <div>
                                        <span class="badge ${employee.employmentInfo?.status === 'active' ? 'bg-success' : 'bg-secondary'}">
                                            ${employee.employmentInfo?.status || 'N/A'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `);

            $('#employeeDetailsModal').modal('show');
        }

        // Edit employee
        function editEmployee(employeeId) {
            axios.get(`/api/employees/${employeeId}`)
                .then(response => {
                    const employee = response.data.data;
                    populateEditForm(employee);
                })
                .catch(error => {
                    console.error('Error fetching employee:', error);
                    Swal.fire('Error', 'Failed to load employee details', 'error');
                });
        }

        // Populate edit form
        function populateEditForm(employee) {
            $('#edit-employee-id').val(employee._id);
            $('#edit-first-name').val(employee.personalInfo?.firstName || '');
            $('#edit-last-name').val(employee.personalInfo?.lastName || '');
            $('#edit-email').val(employee.personalInfo?.email || '');
            $('#edit-phone').val(employee.personalInfo?.phoneNumber || '');
            $('#edit-department').val(employee.employmentInfo?.departmentId?._id || '');
            $('#edit-grade').val(employee.employmentInfo?.gradeId?._id || '');
            $('#edit-salary').val(employee.employmentInfo?.currentSalary || '');
            $('#edit-status').val(employee.employmentInfo?.status || 'active');

            // Populate department and grade dropdowns
            populateEditDropdowns();
            $('#editEmployeeModal').modal('show');
        }

        // Populate edit form dropdowns
        function populateEditDropdowns() {
            // Populate departments
            const deptSelect = $('#edit-department');
            deptSelect.empty().append('<option value="">Select department</option>');
            departments.forEach(dept => {
                deptSelect.append(`<option value="${dept._id}">${dept.name}</option>`);
            });

            // Populate grades
            const gradeSelect = $('#edit-grade');
            gradeSelect.empty().append('<option value="">Select grade</option>');
            grades.forEach(grade => {
                gradeSelect.append(`<option value="${grade._id}">${grade.name}</option>`);
            });
        }

        // Save employee changes
        function saveEmployeeChanges() {
            const employeeId = $('#edit-employee-id').val();
            const saveBtn = $('#save-employee-changes');
            const saveText = $('#save-changes-text');
            const spinner = $('#save-changes-spinner');

            // Show loading
            saveBtn.prop('disabled', true);
            saveText.addClass('d-none');
            spinner.removeClass('d-none');

            const updateData = {
                personalInfo: {
                    firstName: $('#edit-first-name').val(),
                    lastName: $('#edit-last-name').val(),
                    email: $('#edit-email').val(),
                    phoneNumber: $('#edit-phone').val()
                },
                employmentInfo: {
                    departmentId: $('#edit-department').val(),
                    gradeId: $('#edit-grade').val(),
                    currentSalary: parseFloat($('#edit-salary').val()),
                    status: $('#edit-status').val()
                }
            };

            // Update employee details
            axios.put(`/api/employees/${employeeId}`, updateData)
                .then(response => {
                    $('#editEmployeeModal').modal('hide');
                    Swal.fire('Success', 'Employee updated successfully!', 'success');
                    loadEmployees(currentPage);
                })
                .catch(error => {
                    console.error('Error updating employee:', error);
                    const message = error.response?.data?.message || 'Failed to update employee';
                    Swal.fire('Error', message, 'error');
                })
                .finally(() => {
                    // Reset button
                    saveBtn.prop('disabled', false);
                    saveText.removeClass('d-none');
                    spinner.addClass('d-none');
                });
        }

        // Deactivate employee
        function deactivateEmployee(employeeId) {
            Swal.fire({
                title: 'Deactivate Employee?',
                text: 'This will change the employee status to inactive.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, deactivate',
                cancelButtonText: 'Cancel',
                input: 'textarea',
                inputPlaceholder: 'Please provide a reason for deactivation...',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to provide a reason for deactivation!';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const reason = result.value;
                    
                    axios.put(`/api/employees/${employeeId}/deactivate`, { reason })
                        .then(response => {
                            Swal.fire('Deactivated!', 'Employee has been deactivated.', 'success');
                            loadEmployees(currentPage);
                        })
                        .catch(error => {
                            console.error('Error deactivating employee:', error);
                            const message = error.response?.data?.message || 'Failed to deactivate employee';
                            Swal.fire('Error', message, 'error');
                        });
                }
            });
        }

        // Load departments
        function loadDepartments() {
            axios.get('/api/departments')
                .then(response => {
                    departments = response.data.data || response.data;
                    populateDepartmentFilter();
                    renderDepartmentsDropdown(); // Add this line to update the Add Employee dropdown
                })
                .catch(error => {
                    console.error('Error loading departments:', error);
                });
        }

        // Load grades
        function loadGrades() {
            axios.get('/api/grades')
                .then(response => {
                    grades = response.data.data || response.data;
                    populateGradeFilter();
                })
                .catch(error => {
                    console.error('Error loading grades:', error);
                });
        }

        // Load users
        function loadUsers() {
            axios.get('/api/auth/users')
                .then(response => {
                    users = response.data.users || response.data;
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                });
        }

        // Populate department filter
        function populateDepartmentFilter() {
            const select = $('#filter-department');
            select.empty().append('<option value="">All Departments</option>');
            departments.forEach(dept => {
                select.append(`<option value="${dept._id}">${dept.name}</option>`);
            });
        }

        // Populate grade filter
        function populateGradeFilter() {
            const select = $('#filter-grade');
            select.empty().append('<option value="">All Grades</option>');
            grades.forEach(grade => {
                select.append(`<option value="${grade._id}">${grade.name} (Level ${grade.level})</option>`);
            });
        }

        // Clear filters
        function clearFilters() {
            $('#employee-search').val('');
            $('#filter-department').val('');
            $('#filter-grade').val('');
            $('#filter-status').val('');
            loadEmployees();
        }

        // Update statistics
        function updateStatistics(stats) {
            if (stats) {
                $('#total-employees').text(stats.totalEmployees || 0);
                $('#active-employees').text(stats.activeEmployees || 0);
                $('#departments-count').text(stats.departmentsWithEmployees || 0);
                $('#avg-tenure').text(stats.averageTenure || 0);
            }
        }

        // Render pagination
        function renderPagination(pagination) {
            const paginationEl = $('#employees-pagination');
            paginationEl.empty();

            if (!pagination || pagination.totalPages <= 1) return;

            const { page, totalPages } = pagination;

            // Previous button
            paginationEl.append(`
                <li class="page-item ${page === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="loadEmployees(${page - 1}); return false;">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            `);

            // Page numbers
            const maxVisible = 5;
            let start = Math.max(1, page - Math.floor(maxVisible / 2));
            let end = Math.min(totalPages, start + maxVisible - 1);

            if (end - start + 1 < maxVisible) {
                start = Math.max(1, end - maxVisible + 1);
            }

            for (let i = start; i <= end; i++) {
                paginationEl.append(`
                    <li class="page-item ${i === page ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="loadEmployees(${i}); return false;">${i}</a>
                    </li>
                `);
            }

            // Next button
            paginationEl.append(`
                <li class="page-item ${page === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="loadEmployees(${page + 1}); return false;">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `);
        }

        

                    // Function to render departments dropdown
                    function renderDepartmentsDropdown() {
                        const dropdown = $('#department');
                        dropdown.empty();
                        dropdown.append('<option value="" selected disabled>Select department</option>');

                        departments.forEach(dept => {
                            dropdown.append(`<option value="${dept._id}">${dept.name}</option>`);
                        });
                    }

                    // Function to load positions
                    function loadPositions() {
                        axios.get('/api/positions')
                            .then(response => {
                                positions = response.data;
                                renderPositionsDropdown();
                            })
                            .catch(error => {
                                console.error('Error loading positions:', error);
                                showSwalError('Failed to load positions. Please try again.');
                            });
                    }

                    // Function to render positions dropdown
                    function renderPositionsDropdown() {
                        const dropdown = $('#position');
                        dropdown.empty();
                        dropdown.append('<option value="" selected disabled>Select position</option>');

                        positions.forEach(pos => {
                            dropdown.append(`<option value="${pos._id}" data-department="${pos.departmentId}">${pos.name}</option>`);
                        });
                    }

                    // Function to update positions dropdown based on selected department
                    function updatePositionsDropdown() {
                        const departmentId = $('#department').val();
                        const dropdown = $('#position');

                        dropdown.empty();
                        dropdown.append('<option value="" selected disabled>Select position</option>');

                        if (!departmentId) {
                            return;
                        }

                        const filteredPositions = positions.filter(pos => pos.departmentId === departmentId);

                        if (filteredPositions.length === 0) {
                            dropdown.append('<option value="" disabled>No positions available for this department</option>');
                            return;
                        }

                        filteredPositions.forEach(pos => {
                            dropdown.append(`<option value="${pos._id}">${pos.name}</option>`);
                        });
                    }

                    // Function to load grades
                    function loadGrades() {
                        axios.get('/api/grades')
                            .then(response => {
                                grades = response.data;
                                renderGradesDropdown();
                            })
                            .catch(error => {
                                console.error('Error loading grades:', error);
                                showSwalError('Failed to load grades. Please try again.');
                            });
                    }

                    // Function to render grades dropdown
                    function renderGradesDropdown() {
                        const dropdown = $('#grade');
                        dropdown.empty();
                        dropdown.append('<option value="" selected disabled>Select grade</option>');

                        grades.forEach(grade => {
                            dropdown.append(`<option value="${grade._id}">${grade.name} (MWK${grade.salaryRange.minimum} - MWK${grade.salaryRange.maximum})</option>`);
                        });
                    }

                    // Function to update grade dropdown based on selected position
                    function updateGradeDropdown() {
                        const positionId = $('#position').val();
                        const dropdown = $('#grade');

                        if (!positionId) {
                            dropdown.val('');
                            return;
                        }

                        const selectedPosition = positions.find(pos => pos._id === positionId);
                        if (selectedPosition && selectedPosition.gradeId) {
                            dropdown.val(selectedPosition.gradeId);
                        }
                    }

                    // Function to update salary field based on selected grade
                    function updateSalaryField() {
                        const gradeId = $('#grade').val();

                        if (!gradeId) {
                            $('#salary').val('');
                            return;
                        }

                        const selectedGrade = grades.find(grade => grade._id === gradeId);
                        if (selectedGrade) {
                            // Set salary to the midpoint of the grade range
                            const midpoint = (selectedGrade.salaryRange.minimum + selectedGrade.salaryRange.maximum) / 2;
                            $('#salary').val(midpoint.toFixed(2));
                        }
                    }

                    // Function to load users
                    function loadUsers() {
                        axios.get('/api/auth/users')
                            .then(response => {
                                users = response.data.users;
                                renderUsersDropdown();
                            })
                            .catch(error => {
                                console.error('Error loading users:', error);
                                showSwalError('Failed to load users. Please try again.');
                            });
                    }

                    // Function to render users dropdown
                    function renderUsersDropdown() {
                        const dropdown = $('#user-select');
                        dropdown.empty();
                        dropdown.append('<option value="" selected disabled>Select a user</option>');

                        users.forEach(user => {
                            dropdown.append(`<option value="${user._id}">${user.email} (${user.role})</option>`);
                        });
                    }

                    // Function to add a new employee
                    function addEmployee() {
                        const submitBtn = $('#submit-employee');
                        const submitText = $('#submit-employee-text');
                        const spinner = $('#submit-employee-spinner');

                        // Show loading state
                        submitBtn.prop('disabled', true);
                        submitText.addClass('d-none');
                        spinner.removeClass('d-none');

                        // Get form data
                        const userId = $('#user-select').val();
                        const employeeId = $('#employee-id').val() || generateEmployeeId();
                        const firstName = $('#first-name').val();
                        const middleName = $('#middle-name').val();
                        const lastName = $('#last-name').val();
                        const dateOfBirth = $('#date-of-birth').val();
                        const gender = $('#gender').val();
                        const nationality = $('#nationality').val();
                        const email = $('#email').val();
                        const phoneNumber = $('#phone-number').val();
                        const departmentId = $('#department').val();
                        const positionId = $('#position').val();
                        const gradeId = $('#grade').val();
                        const salary = parseFloat($('#salary').val());
                        const employmentType = $('#employment-type').val();
                        const startDate = $('#start-date').val();
                        const probationPeriod = parseInt($('#probation-period').val());

                        // Address fields
                        const street = $('#street-address').val();
                        const city = $('#city').val();
                        const state = $('#state').val();
                        const zipCode = $('#zip-code').val();
                        const country = $('#country').val();

                        // Emergency contact fields
                        const emergencyContactName = $('#emergency-contact-name').val();
                        const emergencyContactRelationship = $('#emergency-contact-relationship').val();
                        const emergencyContactPhone = $('#emergency-contact-phone').val();

                        //Bank information fields
                        const bankName = $('#bank-name').val();
                        const accountName = $('#account-name').val();
                        const accountNumber = $('#account-number').val();
                        const routingNumber = $('#routing-number').val();
                        const bankCode = $('#bank-code').val();
                        const iban = $('#iban').val();

                        if (employeeId && !/^[A-Z0-9-]+$/.test(employeeId)) {
                            showValidationError('Employee ID must contain only uppercase letters, numbers, and hyphens');
                            return;
                        }

                        // Validate required fields
                        if (!dateOfBirth || new Date().getFullYear() - new Date(dateOfBirth).getFullYear() < 16) {
                            showValidationError('Employee must be at least 16 years old');
                            return;
                        }

                        // Validate account number (numeric only)
                        if (!/^\d+$/.test(accountNumber)) {
                            showValidationError('Account number must contain only numbers');
                            return;
                        }

                        // Validate IBAN format if provided
                        if (iban && !/^[A-Z0-9]+$/.test(iban)) {
                            showValidationError('IBAN must contain only uppercase letters and numbers');
                            return;
                        }

                        // Prepare employee data with all required fields
                        const employeeData = {
                            userId: userId,
                            employeeId: employeeId,
                            personalInfo: {
                                firstName: firstName,
                                middleName: middleName,
                                lastName: lastName,
                                dateOfBirth: dateOfBirth,
                                gender: gender,
                                nationality: nationality,
                                idNumber: 'TEAMPAY_ID_' + Math.random().toString(36).substr(2, 9), // Temporary until you add ID field
                                phoneNumber: phoneNumber,
                                email: email,
                                address: {
                                    street: street,
                                    city: city,
                                    state: state,
                                    zipCode: zipCode,
                                    country: country || 'United States'
                                }
                            },
                            employmentInfo: {
                                positionId: positionId,
                                departmentId: departmentId,
                                gradeId: gradeId,
                                currentSalary: salary,
                                employmentType: employmentType,
                                startDate: startDate,
                                isOnProbation: true,
                                probationEndDate: new Date(new Date(startDate).setMonth(new Date(startDate).getMonth() + probationPeriod)).toISOString(),
                                status: 'active'
                            },
                            bankInfo: {
                                bankName: bankName,
                                accountName: accountName,
                                accountNumber: accountNumber,
                                routingNumber: routingNumber || undefined,
                                bankCode: bankCode || undefined,
                                iban: iban ? iban.toUpperCase() : undefined
                            },
                            emergencyContact: {
                                name: emergencyContactName,
                                relationship: emergencyContactRelationship,
                                phoneNumber: emergencyContactPhone
                            }
                        };

                        // Send request to create employee
                        axios.post('/api/employees', employeeData)
                            .then(response => {
                                // Reset form
                                $('#add-employee-form')[0].reset();

                                // Show success message
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Employee created successfully!',
                                    confirmButtonText: 'OK',
                                    customClass: {
                                        confirmButton: 'btn btn-primary'
                                    },
                                    buttonsStyling: false
                                }).then(() => {
                                    // Return to employees list
                                    showEmployeesSection();
                                    // Refresh employees list
                                    loadEmployees();
                                });
                            })
                            .catch(error => {
                                console.error('Error creating employee:', error);
                                let errorMessage = 'Failed to create employee. Please try again.';

                                if (error.response && error.response.data && error.response.data.message) {
                                    errorMessage = error.response.data.message;
                                }

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: errorMessage,
                                    confirmButtonText: 'OK',
                                    customClass: {
                                        confirmButton: 'btn btn-primary'
                                    },
                                    buttonsStyling: false
                                });
                            })
                            .finally(() => {
                                // Reset button state
                                submitBtn.prop('disabled', false);
                                submitText.removeClass('d-none');
                                spinner.addClass('d-none');
                            });
                    }

                    function generateEmployeeId() {
                        // Get the last employee ID from the loaded employees
                        // Format: TEAMPAY0001, TEAMPAY0002, etc.
                        let maxId = 0;
                        $('#employees-table-body tr').each(function () {
                            const idCell = $(this).find('td').eq(0).text();
                            const match = idCell.match(/^TEAMPAY(\d+)$/);
                            if (match) {
                                const num = parseInt(match[1], 10);
                                if (num > maxId) maxId = num;
                            }
                        });
                        const nextId = maxId + 1;
                        return `TEAMPAY${nextId.toString().padStart(4, '0')}`;
                    }

                    // Helper function to show validation error
                    function showValidationError(message) {
                        const submitBtn = $('#submit-employee');
                        const submitText = $('#submit-employee-text');
                        const spinner = $('#submit-employee-spinner');

                        // Reset button state
                        submitBtn.prop('disabled', false);
                        submitText.removeClass('d-none');
                        spinner.addClass('d-none');

                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: message,
                            confirmButtonText: 'OK',
                            customClass: {
                                confirmButton: 'btn btn-primary'
                            },
                            buttonsStyling: false
                        });
                    }
                    // Helper function to show loading state
                    function showLoading(selector, message) {
                        $(selector).html(`
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <div class="loading-spinner text-primary"></div>
                                    <p class="mt-2">${message}</p>
                                </td>
                            </tr>
                        `);
                    }

                    // Helper function to show error state
                    function showError(selector, message) {
                        $(selector).html(`
                            <tr>
                                <td colspan="7" class="text-center py-4 text-danger">
                                    <i class="fas fa-exclamation-circle fa-2x"></i>
                                    <p class="mt-2">${message}</p>
                                </td>
                            </tr>
                        `);
                    }

                    // Helper function to show SweetAlert error
                    function showSwalError(message) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: message,
                            confirmButtonText: 'OK',
                            customClass: {
                                confirmButton: 'btn btn-primary'
                            },
                            buttonsStyling: false
                        });
                    }
                </script>

                <!-- Custom JS -->
                <script src="/js/admin.js"></script>

</body>

</html>


