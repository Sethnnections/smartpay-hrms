<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TPS - Positions</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/admin.css">
    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="/css/departments.css">
</head>
<body>
    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <%- include('./partials/sidebar', { currentPage: 'positions' }) %>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Header -->
        <%- include('./partials/header', { 
            title: 'Positions Management', 
            user: typeof user !== 'undefined' ? user : { name: 'User', email: '', avatar: 'U' } 
        }) %>

        <!-- Page Content -->
        <main class="dashboard-content">
            <div class="container-fluid px-2">
                     <!-- Alerts Container -->
        <div id="alertsContainer"></div>
        
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <p class="text-muted">Manage and track all positions within your organization</p>
            </div>
            <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addPositionModal">
                <i class="fas fa-plus me-2"></i>Add Position
            </button>
        </div>

        <div class="row">
            <!-- Stats Cards -->
            <div class="col-12">
                <div class="row stats-row" id="statsContainer">
                    <!-- Stats will be loaded here -->
                </div>
            </div>
        </div>

        <div class="row" style="margin-top: 15px; margin-bottom: 15px;">
            <!-- Filters -->
            <div class="col-12">
                <div class="card filters-card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-filter me-2"></i>Filters
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3 filters-row">
                            <div class="col-lg-3 col-md-6">
                                <label for="searchInput" class="form-label">Search</label>
                                <input type="text" class="form-control" id="searchInput" placeholder="Name or code...">
                            </div>
                            <div class="col-lg-2 col-md-6">
                                <label for="filterDepartment" class="form-label">Department</label>
                                <select class="form-select" id="filterDepartment">
                                    <option value="">All Departments</option>
                                </select>
                            </div>
                            <div class="col-lg-2 col-md-6">
                                <label for="filterGrade" class="form-label">Grade</label>
                                <select class="form-select" id="filterGrade">
                                    <option value="">All Grades</option>
                                </select>
                            </div>
                            <div class="col-lg-2 col-md-6">
                                <div class="form-check form-switch mt-4 pt-1">
                                    <input class="form-check-input" type="checkbox" id="filterVacancies">
                                    <label class="form-check-label" for="filterVacancies">Has Vacancies</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-12">
                                <div class="filter-buttons">
                                    <button class="btn btn-outline-primary btn-sm" id="applyFilters">
                                        <i class="fas fa-search me-1"></i>Apply
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" id="resetFilters">
                                        <i class="fas fa-undo me-1"></i>Reset
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Positions Table -->
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-users-cog me-2"></i>All Positions
                        </h5>
                        <div class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Total: <span id="positionsCount">0</span> positions
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="positionsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Code</th>
                                        <th>Name</th>
                                        <th>Department</th>
                                        <th>Grade</th>
                                        <th>Total</th>
                                        <th>Filled</th>
                                        <th>Vacancy</th>
                                        <th>Status</th>
                                        <th width="120">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Positions will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

            </div>
        </main>


  <!-- Add Position Modal -->
    <div class="modal fade" id="addPositionModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus me-2"></i>Add New Position
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addPositionForm">
                    <div class="modal-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="name" class="form-label">Position Name</label>
                                <input type="text" class="form-control" id="name" required>
                            </div>
                            <div class="col-md-6">
                                <label for="code" class="form-label">Position Code</label>
                                <input type="text" class="form-control" id="code" required>
                            </div>
                            <div class="col-md-6">
                                <label for="departmentId" class="form-label">Department</label>
                                <select class="form-select" id="departmentId" required>
                                    <option value="">Select Department</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="gradeId" class="form-label">Grade</label>
                                <select class="form-select" id="gradeId" required>
                                    <option value="">Select Grade</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="reportingTo" class="form-label">Reports To</label>
                                <select class="form-select" id="reportingTo">
                                    <option value="">Select Position (Optional)</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="jobType" class="form-label">Job Type</label>
                                <select class="form-select" id="jobType" required>
                                    <option value="full-time">Full-time</option>
                                    <option value="part-time">Part-time</option>
                                    <option value="contract">Contract</option>
                                    <option value="temporary">Temporary</option>
                                    <option value="intern">Intern</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="capacityTotal" class="form-label">Total Capacity</label>
                                <input type="number" class="form-control" id="capacityTotal" min="1" value="1" required>
                            </div>
                            <div class="col-12">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" rows="3" required></textarea>
                            </div>
                            <div class="col-12">
                                <label for="responsibilities" class="form-label">Responsibilities (One per line)</label>
                                <textarea class="form-control" id="responsibilities" rows="3"></textarea>
                            </div>
                            
                            <!-- Requirements Section -->
                            <div class="col-12 mt-3">
                                <h6 class="border-bottom pb-2">
                                    <i class="fas fa-clipboard-list me-2"></i>Requirements
                                </h6>
                            </div>
                            
                            <div class="col-md-4">
                                <label for="educationMinimum" class="form-label">Minimum Education</label>
                                <select class="form-select" id="educationMinimum" required>
                                    <option value="high_school">High School</option>
                                    <option value="diploma">Diploma</option>
                                    <option value="bachelor" selected>Bachelor's Degree</option>
                                    <option value="master">Master's Degree</option>
                                    <option value="phd">PhD</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="educationPreferred" class="form-label">Preferred Education</label>
                                <select class="form-select" id="educationPreferred">
                                    <option value="">Not Specified</option>
                                    <option value="high_school">High School</option>
                                    <option value="diploma">Diploma</option>
                                    <option value="bachelor">Bachelor's Degree</option>
                                    <option value="master">Master's Degree</option>
                                    <option value="phd">PhD</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="educationField" class="form-label">Field of Study</label>
                                <input type="text" class="form-control" id="educationField">
                            </div>
                            
                            <div class="col-md-4">
                                <label for="experienceMinimum" class="form-label">Minimum Experience (Years)</label>
                                <input type="number" class="form-control" id="experienceMinimum" min="0" value="0" required>
                            </div>
                            <div class="col-md-4">
                                <label for="experiencePreferred" class="form-label">Preferred Experience (Years)</label>
                                <input type="number" class="form-control" id="experiencePreferred" min="0">
                            </div>
                            <div class="col-md-4">
                                <label for="experienceType" class="form-label">Experience Type</label>
                                <select class="form-select" id="experienceType">
                                    <option value="relevant" selected>Relevant</option>
                                    <option value="any">Any</option>
                                    <option value="management">Management</option>
                                    <option value="technical">Technical</option>
                                    <option value="leadership">Leadership</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="fas fa-save me-2"></i>Create Position
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Position Modal -->
    <div class="modal fade" id="editPositionModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-edit me-2"></i>Edit Position
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editPositionForm">
                    <input type="hidden" id="editPositionId">
                    <div class="modal-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="editName" class="form-label">Position Name</label>
                                <input type="text" class="form-control" id="editName" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editCode" class="form-label">Position Code</label>
                                <input type="text" class="form-control" id="editCode" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editDepartmentId" class="form-label">Department</label>
                                <select class="form-select" id="editDepartmentId" required>
                                    <option value="">Select Department</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editGradeId" class="form-label">Grade</label>
                                <select class="form-select" id="editGradeId" required>
                                    <option value="">Select Grade</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editReportingTo" class="form-label">Reports To</label>
                                <select class="form-select" id="editReportingTo">
                                    <option value="">Select Position (Optional)</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editJobType" class="form-label">Job Type</label>
                                <select class="form-select" id="editJobType" required>
                                    <option value="full-time">Full-time</option>
                                    <option value="part-time">Part-time</option>
                                    <option value="contract">Contract</option>
                                    <option value="temporary">Temporary</option>
                                    <option value="intern">Intern</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editCapacityTotal" class="form-label">Total Capacity</label>
                                <input type="number" class="form-control" id="editCapacityTotal" min="1" value="1" required>
                            </div>
                            <div class="col-12">
                                <label for="editDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="editDescription" rows="3" required></textarea>
                            </div>
                            <div class="col-12">
                                <label for="editResponsibilities" class="form-label">Responsibilities (One per line)</label>
                                <textarea class="form-control" id="editResponsibilities" rows="3"></textarea>
                            </div>
                            
                            <!-- Requirements Section -->
                            <div class="col-12 mt-3">
                                <h6 class="border-bottom pb-2">
                                    <i class="fas fa-clipboard-list me-2"></i>Requirements
                                </h6>
                            </div>
                            
                            <div class="col-md-4">
                                <label for="editEducationMinimum" class="form-label">Minimum Education</label>
                                <select class="form-select" id="editEducationMinimum" required>
                                    <option value="high_school">High School</option>
                                    <option value="diploma">Diploma</option>
                                    <option value="bachelor" selected>Bachelor's Degree</option>
                                    <option value="master">Master's Degree</option>
                                    <option value="phd">PhD</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="editEducationPreferred" class="form-label">Preferred Education</label>
                                <select class="form-select" id="editEducationPreferred">
                                    <option value="">Not Specified</option>
                                    <option value="high_school">High School</option>
                                    <option value="diploma">Diploma</option>
                                    <option value="bachelor">Bachelor's Degree</option>
                                    <option value="master">Master's Degree</option>
                                    <option value="phd">PhD</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="editEducationField" class="form-label">Field of Study</label>
                                <input type="text" class="form-control" id="editEducationField">
                            </div>
                            
                            <div class="col-md-4">
                                <label for="editExperienceMinimum" class="form-label">Minimum Experience (Years)</label>
                                <input type="number" class="form-control" id="editExperienceMinimum" min="0" value="0" required>
                            </div>
                            <div class="col-md-4">
                                <label for="editExperiencePreferred" class="form-label">Preferred Experience (Years)</label>
                                <input type="number" class="form-control" id="editExperiencePreferred" min="0">
                            </div>
                            <div class="col-md-4">
                                <label for="editExperienceType" class="form-label">Experience Type</label>
                                <select class="form-select" id="editExperienceType">
                                    <option value="relevant" selected>Relevant</option>
                                    <option value="any">Any</option>
                                    <option value="management">Management</option>
                                    <option value="technical">Technical</option>
                                    <option value="leadership">Leadership</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="fas fa-save me-2"></i>Update Position
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS -->
        <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.4.8/sweetalert2.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/dataTables.bootstrap5.min.js"></script>

    <script>
        // Global variables
        let positionsTable;
        let departments = [];
        let grades = [];
        let positions = [];

        // API endpoints
        const API_BASE = '/api';
        const POSITIONS_API = `${API_BASE}/positions`;
        const DEPARTMENTS_API = `${API_BASE}/departments`;
        const GRADES_API = `${API_BASE}/grades`;

        // Initialize the application
        $(document).ready(function() {
            initializeApp();
        });

        async function initializeApp() {
            try {
                showLoading();
                await Promise.all([
                    loadDepartments(),
                    loadGrades(),
                    loadPositions()
                ]);
                initializeTable();
                initializeEventHandlers();
                loadStats();
                hideLoading();
            } catch (error) {
                console.error('Error initializing app:', error);
                showAlert('Error loading data. Please refresh the page.', 'error');
                hideLoading();
            }
        }

        // Loading functions
        function showLoading() {
            $('#loadingOverlay').show();
        }

        function hideLoading() {
            $('#loadingOverlay').hide();
        }

        // API functions
        async function apiRequest(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
                    throw new Error(errorData.error || `HTTP ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error('API request failed:', error);
                throw error;
            }
        }

        // Data loading functions
        async function loadDepartments() {
            try {
                departments = await apiRequest(DEPARTMENTS_API);
                populateDepartmentSelects();
            } catch (error) {
                console.error('Error loading departments:', error);
                departments = [];
            }
        }

        async function loadGrades() {
            try {
                grades = await apiRequest(GRADES_API);
                populateGradeSelects();
            } catch (error) {
                console.error('Error loading grades:', error);
                grades = [];
            }
        }

        async function loadPositions() {
            try {
                positions = await apiRequest(POSITIONS_API);
                populateReportingToSelects();
                updatePositionsCount();
            } catch (error) {
                console.error('Error loading positions:', error);
                positions = [];
            }
        }

        // Populate select options
        function populateDepartmentSelects() {
            const selects = ['#departmentId', '#editDepartmentId', '#filterDepartment'];
            selects.forEach(selector => {
                const $select = $(selector);
                const currentValue = $select.val();
                
                // Clear existing options except the first one
                $select.find('option:not(:first)').remove();
                
                departments.forEach(dept => {
                    $select.append(`<option value="${dept._id}">${dept.name}</option>`);
                });
                
                // Restore selection if it was set
                if (currentValue) $select.val(currentValue);
            });
        }

        function populateGradeSelects() {
            const selects = ['#gradeId', '#editGradeId', '#filterGrade'];
            selects.forEach(selector => {
                const $select = $(selector);
                const currentValue = $select.val();
                
                // Clear existing options except the first one
                $select.find('option:not(:first)').remove();
                
                grades.forEach(grade => {
                    $select.append(`<option value="${grade._id}">${grade.name} (Level ${grade.level})</option>`);
                });
                
                // Restore selection if it was set
                if (currentValue) $select.val(currentValue);
            });
        }

        function populateReportingToSelects() {
            const selects = ['#reportingTo', '#editReportingTo'];
            selects.forEach(selector => {
                const $select = $(selector);
                const currentValue = $select.val();
                
                // Clear existing options except the first one
                $select.find('option:not(:first)').remove();
                
                positions.forEach(position => {
                    $select.append(`<option value="${position._id}">${position.name} (${position.code})</option>`);
                });
                
                // Restore selection if it was set
                if (currentValue) $select.val(currentValue);
            });
        }

        // Table functions
        function initializeTable() {
            if (positionsTable) {
                positionsTable.destroy();
            }

            positionsTable = $('#positionsTable').DataTable({
                data: positions,
                columns: [
                    { data: 'code' },
                    { data: 'name' },
                    { 
                        data: 'department.name',
                        defaultContent: 'N/A'
                    },
                    { 
                        data: 'grade.name',
                        defaultContent: 'N/A'
                    },
                    { data: 'capacity.total' },
                    { data: 'capacity.filled' },
                    { data: 'capacity.vacant' },
                    {
                        data: 'status',
                        render: function(data) {
                            const statusMap = {
                                'active': 'success',
                                'frozen': 'warning',
                                'under_review': 'info',
                                'discontinued': 'danger'
                            };
                            const badgeClass = statusMap[data] || 'secondary';
                            return `<span class="badge bg-${badgeClass}">${data}</span>`;
                        }
                    },
                    {
                        data: null,
                        render: function(data, type, row) {
                            return `
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary btn-sm" onclick="editPosition('${row._id}')" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-info btn-sm" onclick="viewPosition('${row._id}')" title="View">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deletePosition('${row._id}')" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                order: [[1, 'asc']],
                pageLength: 25,
                responsive: true,
                language: {
                    emptyTable: "No positions found"
                }
            });
        }

        function refreshTable() {
            if (positionsTable) {
                positionsTable.clear().rows.add(positions).draw();
                updatePositionsCount();
            }
        }

        function updatePositionsCount() {
            $('#positionsCount').text(positions.length);
        }

        // Stats functions
        async function loadStats() {
            try {
                const stats = calculateStats();
                renderStatsCards(stats);
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        function calculateStats() {
            const totalPositions = positions.length;
            const activePositions = positions.filter(p => p.status === 'active').length;
            const totalCapacity = positions.reduce((sum, p) => sum + p.capacity.total, 0);
            const filledCapacity = positions.reduce((sum, p) => sum + p.capacity.filled, 0);
            const vacantCapacity = positions.reduce((sum, p) => sum + p.capacity.vacant, 0);
            const avgTeamSize = totalPositions > 0 ? Math.round(totalCapacity / totalPositions) : 0;
            const occupancyRate = totalCapacity > 0 ? Math.round((filledCapacity / totalCapacity) * 100) : 0;

            return {
                totalPositions,
                activePositions,
                totalCapacity,
                filledCapacity,
                vacantCapacity,
                avgTeamSize,
                occupancyRate,
                totalEmployees: filledCapacity
            };
        }

        function renderStatsCards(stats) {
            const statsHtml = `
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-header">
                            <p class="stat-title">Total Positions</p>
                            <div class="stat-icon">
                                <i class="fas fa-briefcase"></i>
                            </div>
                        </div>
                        <div class="stat-value">${stats.totalPositions}</div>
                        <div class="stat-trend">
                            <span>${stats.activePositions} active positions</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-header">
                            <p class="stat-title">Total Capacity</p>
                            <div class="stat-icon">
                                <i class="fas fa-users"></i>
                            </div>
                        </div>
                        <div class="stat-value">${stats.totalCapacity}</div>
                        <div class="stat-trend">
                            <span>${stats.filledCapacity} filled, ${stats.vacantCapacity} vacant</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-header">
                            <p class="stat-title">Occupancy Rate</p>
                            <div class="stat-icon">
                                <i class="fas fa-chart-pie"></i>
                            </div>
                        </div>
                        <div class="stat-value">${stats.occupancyRate}%</div>
                        <div class="stat-trend">
                            <span>${stats.filledCapacity} of ${stats.totalCapacity} positions filled</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-header">
                            <p class="stat-title">Avg. Team Size</p>
                            <div class="stat-icon">
                                <i class="fas fa-user-friends"></i>
                            </div>
                        </div>
                        <div class="stat-value">${stats.avgTeamSize}</div>
                        <div class="stat-trend">
                            <span>${stats.totalEmployees} total employees</span>
                        </div>
                    </div>
                </div>
            `;
            $('#statsContainer').html(statsHtml);
        }

        // Event handlers
        function initializeEventHandlers() {
            // Add position form
            $('#addPositionForm').on('submit', handleAddPosition);
            
            // Edit position form
            $('#editPositionForm').on('submit', handleEditPosition);
            
            // Filter handlers
            $('#applyFilters').on('click', applyFilters);
            $('#resetFilters').on('click', resetFilters);
            
            // Search handler
            $('#searchInput').on('keyup', debounce(applyFilters, 300));
            
            // Modal event handlers
            $('#addPositionModal').on('hidden.bs.modal', function() {
                $('#addPositionForm')[0].reset();
                clearFormErrors();
            });
            
            $('#editPositionModal').on('hidden.bs.modal', function() {
                $('#editPositionForm')[0].reset();
                clearFormErrors();
            });
        }

        // Form handlers
        async function handleAddPosition(e) {
            e.preventDefault();
            
            try {
                showLoading();
                
                const formData = getFormData('add');
                const newPosition = await apiRequest(POSITIONS_API, {
                    method: 'POST',
                    body: JSON.stringify(formData)
                });
                
                // Add to local array and refresh table
                positions.push(newPosition);
                refreshTable();
                populateReportingToSelects();
                loadStats();
                
                // Close modal and show success
                $('#addPositionModal').modal('hide');
                showAlert('Position created successfully!', 'success');
                
            } catch (error) {
                console.error('Error creating position:', error);
                showAlert(`Error creating position: ${error.message}`, 'error');
            } finally {
                hideLoading();
            }
        }

        async function handleEditPosition(e) {
            e.preventDefault();
            
            try {
                showLoading();
                
                const positionId = $('#editPositionId').val();
                const formData = getFormData('edit');
                
                const updatedPosition = await apiRequest(`${POSITIONS_API}/${positionId}`, {
                    method: 'PUT',
                    body: JSON.stringify(formData)
                });
                
                // Update local array and refresh table
                const index = positions.findIndex(p => p._id === positionId);
                if (index !== -1) {
                    positions[index] = updatedPosition;
                    refreshTable();
                    populateReportingToSelects();
                    loadStats();
                }
                
                // Close modal and show success
                $('#editPositionModal').modal('hide');
                showAlert('Position updated successfully!', 'success');
                
            } catch (error) {
                console.error('Error updating position:', error);
                showAlert(`Error updating position: ${error.message}`, 'error');
            } finally {
                hideLoading();
            }
        }

        function getFormData(mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const getId = (id) => mode === 'edit' ? `edit${id.charAt(0).toUpperCase() + id.slice(1)}` : id;
            
            const responsibilities = $(`#${getId('responsibilities')}`).val()
                .split('\n')
                .map(r => r.trim())
                .filter(r => r.length > 0);
            
            return {
                name: $(`#${getId('name')}`).val().trim(),
                code: $(`#${getId('code')}`).val().trim().toUpperCase(),
                departmentId: $(`#${getId('departmentId')}`).val(),
                gradeId: $(`#${getId('gradeId')}`).val(),
                reportingTo: $(`#${getId('reportingTo')}`).val() || null,
                jobType: $(`#${getId('jobType')}`).val(),
                capacity: {
                    total: parseInt($(`#${getId('capacityTotal')}`).val()) || 1
                },
                description: $(`#${getId('description')}`).val().trim(),
                responsibilities: responsibilities,
                requirements: {
                    education: {
                        minimum: $(`#${getId('educationMinimum')}`).val(),
                        preferred: $(`#${getId('educationPreferred')}`).val() || null,
                        field: $(`#${getId('educationField')}`).val().trim()
                    },
                    experience: {
                        minimum: parseInt($(`#${getId('experienceMinimum')}`).val()) || 0,
                        preferred: parseInt($(`#${getId('experiencePreferred')}`).val()) || null,
                        type: $(`#${getId('experienceType')}`).val()
                    }
                }
            };
        }

        // Position operations
        async function editPosition(id) {
            try {
                const position = positions.find(p => p._id === id);
                if (!position) {
                    showAlert('Position not found', 'error');
                    return;
                }
                
                // Populate edit form
                $('#editPositionId').val(position._id);
                $('#editName').val(position.name);
                $('#editCode').val(position.code);
                $('#editDepartmentId').val(position.departmentId);
                $('#editGradeId').val(position.gradeId);
                $('#editReportingTo').val(position.reportingTo || '');
                $('#editJobType').val(position.jobType);
                $('#editCapacityTotal').val(position.capacity.total);
                $('#editDescription').val(position.description);
                $('#editResponsibilities').val(position.responsibilities.join('\n'));
                $('#editEducationMinimum').val(position.requirements.education.minimum);
                $('#editEducationPreferred').val(position.requirements.education.preferred || '');
                $('#editEducationField').val(position.requirements.education.field || '');
                $('#editExperienceMinimum').val(position.requirements.experience.minimum);
                $('#editExperiencePreferred').val(position.requirements.experience.preferred || '');
                $('#editExperienceType').val(position.requirements.experience.type);
                
                $('#editPositionModal').modal('show');
                
            } catch (error) {
                console.error('Error loading position for edit:', error);
                showAlert('Error loading position data', 'error');
            }
        }

        async function viewPosition(id) {
            try {
                const position = positions.find(p => p._id === id);
                if (!position) {
                    showAlert('Position not found', 'error');
                    return;
                }
                
                // You can implement a view modal here
                showAlert('View functionality will be implemented', 'info');
                
            } catch (error) {
                console.error('Error viewing position:', error);
                showAlert('Error loading position details', 'error');
            }
        }

        async function deletePosition(id) {
            try {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: 'This action cannot be undone!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                });

                if (result.isConfirmed) {
                    showLoading();
                    
                    await apiRequest(`${POSITIONS_API}/${id}`, {
                        method: 'DELETE'
                    });
                    
                    // Remove from local array and refresh table
                    positions = positions.filter(p => p._id !== id);
                    refreshTable();
                    populateReportingToSelects();
                    loadStats();
                    
                    showAlert('Position deleted successfully!', 'success');
                }
                
            } catch (error) {
                console.error('Error deleting position:', error);
                showAlert(`Error deleting position: ${error.message}`, 'error');
            } finally {
                hideLoading();
            }
        }

        // Filter functions
        function applyFilters() {
            const search = $('#searchInput').val().toLowerCase();
            const departmentFilter = $('#filterDepartment').val();
            const gradeFilter = $('#filterGrade').val();
            const vacanciesOnly = $('#filterVacancies').is(':checked');
            
            let filteredPositions = positions;
            
            // Apply search filter
            if (search) {
                filteredPositions = filteredPositions.filter(position => 
                    position.name.toLowerCase().includes(search) ||
                    position.code.toLowerCase().includes(search)
                );
            }
            
            // Apply department filter
            if (departmentFilter) {
                filteredPositions = filteredPositions.filter(position => 
                    position.departmentId === departmentFilter
                );
            }
            
            // Apply grade filter
            if (gradeFilter) {
                filteredPositions = filteredPositions.filter(position => 
                    position.gradeId === gradeFilter
                );
            }
            
            // Apply vacancies filter
            if (vacanciesOnly) {
                filteredPositions = filteredPositions.filter(position => 
                    position.capacity.vacant > 0
                );
            }
            
            // Update table
            if (positionsTable) {
                positionsTable.clear().rows.add(filteredPositions).draw();
            }
        }

        function resetFilters() {
            $('#searchInput').val('');
            $('#filterDepartment').val('');
            $('#filterGrade').val('');
            $('#filterVacancies').prop('checked', false);
            
            // Reset table to show all positions
            if (positionsTable) {
                positionsTable.clear().rows.add(positions).draw();
            }
        }

        // Utility functions
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function showAlert(message, type) {
            const alertClass = type === 'error' ? 'danger' : type;
            const alertHtml = `
                <div class="alert alert-${alertClass} alert-dismissible fade show" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            $('#alertsContainer').html(alertHtml);
            
            // Auto dismiss after 5 seconds
            setTimeout(() => {
                $('.alert').fadeOut();
            }, 5000);
        }

        function clearFormErrors() {
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').remove();
        }

        // Global functions for button clicks
        window.editPosition = editPosition;
        window.viewPosition = viewPosition;
        window.deletePosition = deletePosition;
    </script>

    
    <!-- Custom JS -->
    <script src="/js/admin.js"></script>
    
</body>
</html>