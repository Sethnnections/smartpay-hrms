<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TPS - Grades Management</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/admin.css">
    
    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="/css/grades.css">
</head>
<body>
    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <%- include('./partials/sidebar', { currentPage: 'grades' }) %>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Header -->
        <%- include('./partials/header', { 
            title: 'Grades Management', 
            user: typeof user !== 'undefined' ? user : { name: 'User', email: '', avatar: 'U' } 
        }) %>

        <!-- Page Content -->
        <main class="dashboard-content">
            <div class="container-fluid px-4">
                <!-- Page Header -->
                <div class="page-header">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <p class="text-muted">Define and manage employee grades and compensation</p>
                        </div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addGradeModal" id="addGradeBtn">
                            <i class="fas fa-plus me-2"></i>Add Grade
                        </button>
                    </div>
                </div>

                <!-- Grades Stats -->
                <div class="row mb-4" id="gradesStats">
                    <!-- Stats will be loaded here -->
                </div>

                <!-- Filters -->
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="filterForm" class="row g-3">
                            <div class="col-md-4">
                                <label for="searchInput" class="form-label">Search</label>
                                <input type="text" class="form-control" id="searchInput" placeholder="Name, code or level">
                            </div>
                            <div class="col-md-3">
                                <label for="statusFilter" class="form-label">Status</label>
                                <select class="form-select" id="statusFilter">
                                    <option value="true">Active Only</option>
                                    <option value="false">Include Inactive</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="salaryFilter" class="form-label">Salary Range</label>
                                <select class="form-select" id="salaryFilter">
                                    <option value="">All Salaries</option>
                                    <option value="0-3000">Under $3K</option>
                                    <option value="3000-6000">$3K - $6K</option>
                                    <option value="6000-10000">$6K - $10K</option>
                                    <option value="10000-15000">$10K - $15K</option>
                                    <option value="15000-">Over $15K</option>
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="submit" class="btn btn-primary me-2">
                                    <i class="fas fa-filter me-1"></i>Filter
                                </button>
                                <button type="reset" class="btn btn-outline-secondary">
                                    <i class="fas fa-undo me-1"></i>Reset
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Grades Table -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="gradesTable">
                                <thead>
                                    <tr>
                                        <th>Grade</th>
                                        <th>Level</th>
                                        <th>Base Salary</th>
                                        <th>Salary Range</th>
                                        <th>Employees</th>
                                        <th>Promotion Path</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="gradesTableBody">
                                    <!-- Grades will be loaded here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <nav aria-label="Page navigation" class="mt-4">
                            <ul class="pagination justify-content-center" id="pagination">
                                <!-- Pagination will be loaded here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Grade Modal -->
    <div class="modal fade" id="addGradeModal" tabindex="-1" aria-labelledby="addGradeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addGradeModalLabel">Add New Grade</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addGradeForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="gradeName" class="form-label">Grade Name *</label>
                                    <input type="text" class="form-control" id="gradeName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="gradeCode" class="form-label">Grade Code *</label>
                                    <input type="text" class="form-control" id="gradeCode" required>
                                    <div class="form-text">Uppercase letters and numbers only</div>
                                </div>
                                <div class="mb-3">
                                    <label for="gradeLevel" class="form-label">Grade Level *</label>
                                    <input type="number" class="form-control" id="gradeLevel" min="1" max="20" required>
                                </div>
                                <div class="mb-3">
                                    <label for="gradeDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="gradeDescription" rows="2"></textarea>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="currency" class="form-label">Currency *</label>
                                    <select class="form-select" id="currency" required>
                                        <option value="MWK">MWK (Malawian Kwacha)</option>
                                        <option value="USD">USD (US Dollar)</option>
                                        <option value="EUR">EUR (Euro)</option>
                                        <option value="GBP">GBP (British Pound)</option>
                                        <option value="CAD">CAD (Canadian Dollar)</option>
                                        <option value="AUD">AUD (Australian Dollar)</option>
                                        <option value="NGN">NGN (Nigerian Naira)</option>
                                        <option value="KES">KES (Kenyan Shilling)</option>
                                        <option value="GHS">GHS (Ghanaian Cedi)</option>
                                        <option value="ZAR">ZAR (South African Rand)</option>
                                    </select>
                                </div>
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="isActive" checked>
                                    <label class="form-check-label" for="isActive">Active</label>
                                </div>
                                <div class="mb-3">
                                    <label for="effectiveDate" class="form-label">Effective Date</label>
                                    <input type="date" class="form-control" id="effectiveDate">
                                </div>
                                <div class="mb-3">
                                    <label for="expiryDate" class="form-label">Expiry Date (optional)</label>
                                    <input type="date" class="form-control" id="expiryDate">
                                </div>
                            </div>
                        </div>

                        <div class="accordion mb-3" id="salaryAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#salaryCollapse">
                                        Salary Information
                                    </button>
                                </h2>
                                <div id="salaryCollapse" class="accordion-collapse collapse show" data-bs-parent="#salaryAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="baseSalary" class="form-label">Base Salary *</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="baseSalary" min="0" step="100" required>
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="minSalary" class="form-label">Minimum Salary *</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="minSalary" min="0" step="100" required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="maxSalary" class="form-label">Maximum Salary *</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="maxSalary" min="0" step="100" required>
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="taxBracket" class="form-label">Tax Bracket *</label>
                                                    <select class="form-select" id="taxBracket" required>
                                                        <option value="low">Low</option>
                                                        <option value="medium" selected>Medium</option>
                                                        <option value="high">High</option>
                                                        <option value="executive">Executive</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="accordion mb-3" id="payrollAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#payrollCollapse">
                                        Payroll Settings
                                    </button>
                                </h2>
                                <div id="payrollCollapse" class="accordion-collapse collapse" data-bs-parent="#payrollAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="payeePercent" class="form-label">PAYE Percentage</label>
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="payeePercent" min="0" max="100" step="0.1" value="0">
                                                        <span class="input-group-text">%</span>
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="pensionPercent" class="form-label">Pension Percentage</label>
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="pensionPercent" min="0" max="100" step="0.1" value="0">
                                                        <span class="input-group-text">%</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="overtimeRate" class="form-label">Overtime Rate</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="overtimeRate" min="0" step="0.5" value="0">
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="overtimeMultiplier" class="form-label">Overtime Multiplier</label>
                                                    <input type="number" class="form-control" id="overtimeMultiplier" min="1" step="0.1" value="1.5">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="accordion mb-3" id="allowancesAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#allowancesCollapse">
                                        Allowances
                                    </button>
                                </h2>
                                <div id="allowancesCollapse" class="accordion-collapse collapse" data-bs-parent="#allowancesAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="transportAllowance" class="form-label">Transport Allowance</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="transportAllowance" min="0" step="10" value="0">
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="housingAllowance" class="form-label">Housing Allowance</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="housingAllowance" min="0" step="100" value="0">
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="medicalAllowance" class="form-label">Medical Allowance</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="medicalAllowance" min="0" step="10" value="0">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="mealsAllowance" class="form-label">Meals Allowance</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="mealsAllowance" min="0" step="10" value="0">
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="communicationAllowance" class="form-label">Communication Allowance</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="communicationAllowance" min="0" step="10" value="0">
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="otherAllowance" class="form-label">Other Allowance</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">$</span>
                                                        <input type="number" class="form-control" id="otherAllowance" min="0" step="10" value="0">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="accordion mb-3" id="promotionAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#promotionCollapse">
                                        Promotion Settings
                                    </button>
                                </h2>
                                <div id="promotionCollapse" class="accordion-collapse collapse" data-bs-parent="#promotionAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="nextGrade" class="form-label">Next Grade</label>
                                                    <select class="form-select" id="nextGrade">
                                                        <option value="">None</option>
                                                        <!-- Next grades will be loaded here -->
                                                    </select>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="minimumTenure" class="form-label">Minimum Tenure (months)</label>
                                                    <input type="number" class="form-control" id="minimumTenure" min="0" value="12">
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="performanceThreshold" class="form-label">Performance Threshold</label>
                                                    <input type="number" class="form-control" id="performanceThreshold" min="1" max="5" step="0.1" value="3.5">
                                                </div>
                                                <div class="mb-3 form-check">
                                                    <input type="checkbox" class="form-check-input" id="requiresApproval" checked>
                                                    <label class="form-check-label" for="requiresApproval">Requires Approval</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="accordion mb-3" id="requirementsAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#requirementsCollapse">
                                        Job Requirements
                                    </button>
                                </h2>
                                <div id="requirementsCollapse" class="accordion-collapse collapse" data-bs-parent="#requirementsAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="minEducation" class="form-label">Minimum Education</label>
                                                    <select class="form-select" id="minEducation">
                                                        <option value="high_school">High School</option>
                                                        <option value="diploma">Diploma</option>
                                                        <option value="bachelor">Bachelor's Degree</option>
                                                        <option value="master">Master's Degree</option>
                                                        <option value="phd">PhD</option>
                                                    </select>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="prefEducation" class="form-label">Preferred Education</label>
                                                    <select class="form-select" id="prefEducation">
                                                        <option value="">None</option>
                                                        <option value="high_school">High School</option>
                                                        <option value="diploma">Diploma</option>
                                                        <option value="bachelor">Bachelor's Degree</option>
                                                        <option value="master">Master's Degree</option>
                                                        <option value="phd">PhD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="minExperience" class="form-label">Minimum Experience (years)</label>
                                                    <input type="number" class="form-control" id="minExperience" min="0" value="0">
                                                </div>
                                                <div class="mb-3">
                                                    <label for="prefExperience" class="form-label">Preferred Experience (years)</label>
                                                    <input type="number" class="form-control" id="prefExperience" min="0" value="0">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveGradeBtn">Save Grade</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Grade Modal -->
    <div class="modal fade" id="editGradeModal" tabindex="-1" aria-labelledby="editGradeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editGradeModalLabel">Edit Grade</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editGradeForm">
                        <input type="hidden" id="editGradeId">
                        <!-- Same form fields as add grade, prefilled with data -->
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="updateGradeBtn">Update Grade</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Salary Calculator Modal -->
    <div class="modal fade" id="salaryCalculatorModal" tabindex="-1" aria-labelledby="salaryCalculatorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="salaryCalculatorModalLabel">Salary Calculator</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="salaryCalculatorForm">
                        <input type="hidden" id="calcGradeId">
                        <div class="mb-3">
                            <label for="overtimeHours" class="form-label">Overtime Hours</label>
                            <input type="number" class="form-control" id="overtimeHours" min="0" step="0.5" value="0">
                        </div>
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">Salary Breakdown</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <p class="mb-1">Base Salary:</p>
                                        <p class="mb-1">Allowances:</p>
                                        <p class="mb-1">Overtime Pay:</p>
                                        <p class="mb-1"><strong>Gross Salary:</strong></p>
                                    </div>
                                    <div class="col-6 text-end">
                                        <p class="mb-1" id="calcBaseSalary">$0.00</p>
                                        <p class="mb-1" id="calcAllowances">$0.00</p>
                                        <p class="mb-1" id="calcOvertime">$0.00</p>
                                        <p class="mb-1"><strong id="calcGrossSalary">$0.00</strong></p>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col-6">
                                        <p class="mb-1">PAYE Tax:</p>
                                        <p class="mb-1">Pension:</p>
                                        <p class="mb-1">Additional Tax:</p>
                                        <p class="mb-1"><strong>Total Deductions:</strong></p>
                                    </div>
                                    <div class="col-6 text-end">
                                        <p class="mb-1" id="calcPaye">$0.00</p>
                                        <p class="mb-1" id="calcPension">$0.00</p>
                                        <p class="mb-1" id="calcAdditionalTax">$0.00</p>
                                        <p class="mb-1"><strong id="calcTotalDeductions">$0.00</strong></p>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col-6">
                                        <p class="mb-0"><strong>Net Salary:</strong></p>
                                    </div>
                                    <div class="col-6 text-end">
                                        <p class="mb-0"><strong id="calcNetSalary">$0.00</strong></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="confirmationModalBody">
                    <!-- Message will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- Axios -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>
    
    <!-- Custom JS -->
    <script src="/js/admin.js"></script>
    
    <!-- Page-specific JS -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get auth token and user from localStorage
            const authToken = localStorage.getItem('authToken');
            const currentUser = JSON.parse(localStorage.getItem('user'));
            
            if (!authToken || !currentUser) {
                window.location.href = '/login';
                return;
            }
            
            // Set up axios defaults
            axios.defaults.baseURL = 'http://localhost:3000/api';
            axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;
            
            // DOM elements
            const gradesTableBody = document.getElementById('gradesTableBody');
            const gradesStats = document.getElementById('gradesStats');
            const filterForm = document.getElementById('filterForm');
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const salaryFilter = document.getElementById('salaryFilter');
            
            // Modal elements
            const addGradeForm = document.getElementById('addGradeForm');
            const saveGradeBtn = document.getElementById('saveGradeBtn');
            const editGradeForm = document.getElementById('editGradeForm');
            const updateGradeBtn = document.getElementById('updateGradeBtn');
            const salaryCalculatorForm = document.getElementById('salaryCalculatorForm');
            const confirmActionBtn = document.getElementById('confirmActionBtn');
            
            // State variables
            let grades = [];
            let nextGrades = [];
            let currentPage = 1;
            let totalPages = 1;
            let limit = 10;
            let filter = {};
            
            // Initialize the page
            loadGrades();
            loadNextGrades();
            
            // Event listeners
            filterForm.addEventListener('submit', function(e) {
                e.preventDefault();
                loadGrades();
            });
            
            filterForm.addEventListener('reset', function() {
                loadGrades();
            });
            
            saveGradeBtn.addEventListener('click', addGrade);
            updateGradeBtn.addEventListener('click', updateGrade);
            confirmActionBtn.addEventListener('click', performConfirmedAction);
            
            // Load grades with filters
            function loadGrades() {
                const filters = {
                    search: searchInput.value,
                    activeOnly: statusFilter.value === 'true',
                };
                
                // Parse salary range filter
                const salaryRange = salaryFilter.value;
                if (salaryRange) {
                    const [min, max] = salaryRange.split('-');
                    if (min) filters.minSalary = min;
                    if (max) filters.maxSalary = max;
                }
                
                showLoading();
                
                axios.get('/grades', { params: filters })
                    .then(response => {
                        grades = response.data;
                        renderGradesTable();
                        renderStats();
                    })
                    .catch(error => {
                        showError('Failed to load grades. Please try again.');
                        console.error('Error loading grades:', error);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Load next grades for promotion dropdowns
            function loadNextGrades() {
                axios.get('/grades')
                    .then(response => {
                        nextGrades = response.data;
                        populateNextGradeDropdowns();
                    })
                    .catch(error => {
                        console.error('Error loading next grades:', error);
                    });
            }
            
            // Render grades table
            function renderGradesTable() {
                gradesTableBody.innerHTML = '';
                
                if (grades.length === 0) {
                    gradesTableBody.innerHTML = `
                        <tr>
                            <td colspan="8" class="text-center py-4">No grades found matching your criteria</td>
                        </tr>
                    `;
                    return;
                }
                
                grades.forEach(grade => {
                    const row = document.createElement('tr');
                    
                    // Format salary values
                    const baseSalary = formatCurrency(grade.baseSalary, grade.currency);
                    const salaryRange = `${formatCurrency(grade.salaryRange.minimum, grade.currency)} - ${formatCurrency(grade.salaryRange.maximum, grade.currency)}`;
                    
                    // Promotion path
                    let promotionPath = 'None';
                    if (grade.promotion?.nextGrade) {
                        promotionPath = `${grade.promotion.nextGrade.name} (Level ${grade.promotion.nextGrade.level})`;
                    }
                    
                    // Status badge
                    const statusBadge = grade.isActive ? 
                        '<span class="badge bg-success">Active</span>' : 
                        '<span class="badge bg-warning">Inactive</span>';
                    
                    row.innerHTML = `
                        <td>
                            <strong>${grade.name}</strong>
                            <div class="text-muted small">${grade.code}</div>
                        </td>
                        <td>${grade.level}</td>
                        <td>${baseSalary}</td>
                        <td>${salaryRange}</td>
                        <td>${grade.employeeCount || 0}</td>
                        <td>${promotionPath}</td>
                        <td>${statusBadge}</td>
                        <td>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-primary edit-btn" data-id="${grade._id}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary calculator-btn" data-id="${grade._id}">
                                    <i class="fas fa-calculator"></i>
                                </button>
                                ${grade.isActive ? `
                                    <button class="btn btn-sm btn-outline-danger deactivate-btn" data-id="${grade._id}">
                                        <i class="fas fa-ban"></i>
                                    </button>
                                ` : `
                                    <button class="btn btn-sm btn-outline-success activate-btn" data-id="${grade._id}">
                                        <i class="fas fa-check"></i>
                                    </button>
                                `}
                            </div>
                        </td>
                    `;
                    
                    gradesTableBody.appendChild(row);
                });
                
                // Add event listeners to action buttons
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', () => openEditModal(btn.dataset.id));
                });
                
                document.querySelectorAll('.calculator-btn').forEach(btn => {
                    btn.addEventListener('click', () => openSalaryCalculator(btn.dataset.id));
                });
                
                document.querySelectorAll('.deactivate-btn').forEach(btn => {
                    btn.addEventListener('click', () => confirmDeactivateGrade(btn.dataset.id));
                });
                
                document.querySelectorAll('.activate-btn').forEach(btn => {
                    btn.addEventListener('click', () => confirmActivateGrade(btn.dataset.id));
                });
            }
            
            // Render grade stats
            function renderStats() {
                const totalGrades = grades.length;
                const activeGrades = grades.filter(g => g.isActive).length;
                
                // Find highest and lowest grades
                let highestGrade = { level: 0 };
                let lowestGrade = { level: 100 };
                let highestSalary = { baseSalary: 0 };
                let lowestSalary = { baseSalary: Infinity };
                
                if (grades.length > 0) {
                    highestGrade = grades.reduce((prev, current) => 
                        current.level > prev.level ? current : prev
                    );
                    
                    lowestGrade = grades.reduce((prev, current) => 
                        current.level < prev.level ? current : prev
                    );
                    
                    highestSalary = grades.reduce((prev, current) => 
                        current.baseSalary > prev.baseSalary ? current : prev
                    );
                    
                    lowestSalary = grades.reduce((prev, current) => 
                        current.baseSalary < prev.baseSalary ? current : prev
                    );
                }
                
                gradesStats.innerHTML = `
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-header">
                                <p class="stat-title">Total Grades</p>
                                <div class="stat-icon">
                                    <i class="fas fa-layer-group"></i>
                                </div>
                            </div>
                            <div class="stat-value">${totalGrades}</div>
                            <div class="stat-trend">
                                <span>${activeGrades} active</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-header">
                                <p class="stat-title">Highest Grade</p>
                                <div class="stat-icon">
                                    <i class="fas fa-arrow-up"></i>
                                </div>
                            </div>
                            <div class="stat-value">Level ${highestGrade.level || 0}</div>
                            <div class="stat-trend">
                                <span>${highestGrade.name || 'N/A'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-header">
                                <p class="stat-title">Lowest Grade</p>
                                <div class="stat-icon">
                                    <i class="fas fa-arrow-down"></i>
                                </div>
                            </div>
                            <div class="stat-value">Level ${lowestGrade.level || 0}</div>
                            <div class="stat-trend">
                                <span>${lowestGrade.name || 'N/A'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-header">
                                <p class="stat-title">Salary Range</p>
                                <div class="stat-icon">
                                    <i class="fas fa-dollar-sign"></i>
                                </div>
                            </div>
                            <div class="stat-value">${formatCurrency(lowestSalary.baseSalary || 0, lowestSalary.currency || 'USD')}</div>
                            <div class="stat-trend">
                                <span>to ${formatCurrency(highestSalary.baseSalary || 0, highestSalary.currency || 'USD')}</span>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Populate next grade dropdowns
            function populateNextGradeDropdowns() {
                const nextGradeDropdown = document.getElementById('nextGrade');
                const editNextGradeDropdown = document.getElementById('editNextGrade');
                
                // Clear existing options
                nextGradeDropdown.innerHTML = '<option value="">None</option>';
                if (editNextGradeDropdown) {
                    editNextGradeDropdown.innerHTML = '<option value="">None</option>';
                }
                
                // Add grade options
                nextGrades.forEach(grade => {
                    const option = document.createElement('option');
                    option.value = grade._id;
                    option.textContent = `${grade.name} (Level ${grade.level})`;
                    
                    nextGradeDropdown.appendChild(option);
                    
                    if (editNextGradeDropdown) {
                        const editOption = option.cloneNode(true);
                        editNextGradeDropdown.appendChild(editOption);
                    }
                });
            }
            
            // Add new grade
            function addGrade() {
                const name = document.getElementById('gradeName').value;
                const code = document.getElementById('gradeCode').value;
                const level = document.getElementById('gradeLevel').value;
                const description = document.getElementById('gradeDescription').value;
                const currency = document.getElementById('currency').value;
                const isActive = document.getElementById('isActive').checked;
                const effectiveDate = document.getElementById('effectiveDate').value;
                const expiryDate = document.getElementById('expiryDate').value;
                
                // Salary data
                const baseSalary = document.getElementById('baseSalary').value;
                const minSalary = document.getElementById('minSalary').value;
                const maxSalary = document.getElementById('maxSalary').value;
                
                // Payroll settings
                const payeePercent = document.getElementById('payeePercent').value;
                const pensionPercent = document.getElementById('pensionPercent').value;
                const overtimeRate = document.getElementById('overtimeRate').value;
                const overtimeMultiplier = document.getElementById('overtimeMultiplier').value;
                
                // Allowances
                const transportAllowance = document.getElementById('transportAllowance').value;
                const housingAllowance = document.getElementById('housingAllowance').value;
                const medicalAllowance = document.getElementById('medicalAllowance').value;
                const mealsAllowance = document.getElementById('mealsAllowance').value;
                const communicationAllowance = document.getElementById('communicationAllowance').value;
                const otherAllowance = document.getElementById('otherAllowance').value;
                
                // Promotion settings
                const nextGrade = document.getElementById('nextGrade').value;
                const minimumTenure = document.getElementById('minimumTenure').value;
                const performanceThreshold = document.getElementById('performanceThreshold').value;
                const requiresApproval = document.getElementById('requiresApproval').checked;
                
                // Job requirements
                const minEducation = document.getElementById('minEducation').value;
                const prefEducation = document.getElementById('prefEducation').value;
                const minExperience = document.getElementById('minExperience').value;
                const prefExperience = document.getElementById('prefExperience').value;
                
                // Tax bracket
                const taxBracket = document.getElementById('taxBracket').value;
                
                // Validate required fields
                if (!name || !code || !level || !baseSalary || !minSalary || !maxSalary) {
                    showError('Please fill all required fields');
                    return;
                }
                
                // Validate salary range
                if (parseFloat(minSalary) > parseFloat(maxSalary)) {
                    showError('Minimum salary cannot be greater than maximum salary');
                    return;
                }
                
                // Validate base salary is within range
                if (parseFloat(baseSalary) < parseFloat(minSalary) || parseFloat(baseSalary) > parseFloat(maxSalary)) {
                    showError('Base salary must be within the salary range');
                    return;
                }
                
                showLoading();
                
                const gradeData = {
                    name,
                    code,
                    level,
                    description,
                    currency,
                    isActive,
                    effectiveDate: effectiveDate || new Date().toISOString(),
                    expiryDate: expiryDate || null,
                    baseSalary,
                    salaryRange: {
                        minimum: minSalary,
                        maximum: maxSalary
                    },
                    payrollSettings: {
                        payeePercent,
                        pensionPercent,
                        overtimeRate,
                        overtimeMultiplier
                    },
                    allowances: {
                        transport: transportAllowance,
                        housing: housingAllowance,
                        medical: medicalAllowance,
                        meals: mealsAllowance,
                        communication: communicationAllowance,
                        other: otherAllowance
                    },
                    taxBracket: {
                        bracket: taxBracket,
                        exemptionAmount: 0,
                        additionalTaxPercent: 0
                    },
                    promotion: {
                        nextGrade: nextGrade || null,
                        minimumTenure,
                        performanceThreshold,
                        requiresApproval
                    },
                    requirements: {
                        education: {
                            minimum: minEducation,
                            preferred: prefEducation || null
                        },
                        experience: {
                            minimum: minExperience,
                            preferred: prefExperience
                        },
                        certifications: [],
                        skills: []
                    }
                };
                
                axios.post('/grades', gradeData)
                    .then(response => {
                        showSuccess('Grade created successfully');
                        $('#addGradeModal').modal('hide');
                        addGradeForm.reset();
                        loadGrades();
                        loadNextGrades(); // Refresh next grade list
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.error || 'Failed to create grade';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Open edit modal
            function openEditModal(gradeId) {
                showLoading();
                
                axios.get(`/grades/${gradeId}`)
                    .then(response => {
                        const grade = response.data;
                        
                        // Set form values
                        document.getElementById('editGradeId').value = grade._id;
                        document.getElementById('editGradeName').value = grade.name;
                        document.getElementById('editGradeCode').value = grade.code;
                        document.getElementById('editGradeLevel').value = grade.level;
                        document.getElementById('editGradeDescription').value = grade.description || '';
                        document.getElementById('editCurrency').value = grade.currency;
                        document.getElementById('editIsActive').checked = grade.isActive;
                        document.getElementById('editEffectiveDate').value = grade.effectiveDate ? 
                            new Date(grade.effectiveDate).toISOString().split('T')[0] : '';
                        document.getElementById('editExpiryDate').value = grade.expiryDate ? 
                            new Date(grade.expiryDate).toISOString().split('T')[0] : '';
                        
                        // Salary data
                        document.getElementById('editBaseSalary').value = grade.baseSalary;
                        document.getElementById('editMinSalary').value = grade.salaryRange.minimum;
                        document.getElementById('editMaxSalary').value = grade.salaryRange.maximum;
                        
                        // Payroll settings
                        document.getElementById('editPayeePercent').value = grade.payrollSettings.payeePercent;
                        document.getElementById('editPensionPercent').value = grade.payrollSettings.pensionPercent;
                        document.getElementById('editOvertimeRate').value = grade.payrollSettings.overtimeRate;
                        document.getElementById('editOvertimeMultiplier').value = grade.payrollSettings.overtimeMultiplier;
                        
                        // Allowances
                        document.getElementById('editTransportAllowance').value = grade.allowances.transport;
                        document.getElementById('editHousingAllowance').value = grade.allowances.housing;
                        document.getElementById('editMedicalAllowance').value = grade.allowances.medical;
                        document.getElementById('editMealsAllowance').value = grade.allowances.meals;
                        document.getElementById('editCommunicationAllowance').value = grade.allowances.communication;
                        document.getElementById('editOtherAllowance').value = grade.allowances.other;
                        
                        // Promotion settings
                        document.getElementById('editNextGrade').value = grade.promotion?.nextGrade?._id || '';
                        document.getElementById('editMinimumTenure').value = grade.promotion?.minimumTenure || 12;
                        document.getElementById('editPerformanceThreshold').value = grade.promotion?.performanceThreshold || 3.5;
                        document.getElementById('editRequiresApproval').checked = grade.promotion?.requiresApproval !== false;
                        
                        // Job requirements
                        document.getElementById('editMinEducation').value = grade.requirements?.education?.minimum || 'high_school';
                        document.getElementById('editPrefEducation').value = grade.requirements?.education?.preferred || '';
                        document.getElementById('editMinExperience').value = grade.requirements?.experience?.minimum || 0;
                        document.getElementById('editPrefExperience').value = grade.requirements?.experience?.preferred || 0;
                        
                        // Tax bracket
                        document.getElementById('editTaxBracket').value = grade.taxBracket?.bracket || 'medium';
                        
                        $('#editGradeModal').modal('show');
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.error || 'Failed to load grade data';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Update grade
            function updateGrade() {
                const id = document.getElementById('editGradeId').value;
                const name = document.getElementById('editGradeName').value;
                const code = document.getElementById('editGradeCode').value;
                const level = document.getElementById('editGradeLevel').value;
                const description = document.getElementById('editGradeDescription').value;
                const currency = document.getElementById('editCurrency').value;
                const isActive = document.getElementById('editIsActive').checked;
                const effectiveDate = document.getElementById('editEffectiveDate').value;
                const expiryDate = document.getElementById('editExpiryDate').value;
                
                // Salary data
                const baseSalary = document.getElementById('editBaseSalary').value;
                const minSalary = document.getElementById('editMinSalary').value;
                const maxSalary = document.getElementById('editMaxSalary').value;
                
                // Payroll settings
                const payeePercent = document.getElementById('editPayeePercent').value;
                const pensionPercent = document.getElementById('editPensionPercent').value;
                const overtimeRate = document.getElementById('editOvertimeRate').value;
                const overtimeMultiplier = document.getElementById('editOvertimeMultiplier').value;
                
                // Allowances
                const transportAllowance = document.getElementById('editTransportAllowance').value;
                const housingAllowance = document.getElementById('editHousingAllowance').value;
                const medicalAllowance = document.getElementById('editMedicalAllowance').value;
                const mealsAllowance = document.getElementById('editMealsAllowance').value;
                const communicationAllowance = document.getElementById('editCommunicationAllowance').value;
                const otherAllowance = document.getElementById('editOtherAllowance').value;
                
                // Promotion settings
                const nextGrade = document.getElementById('editNextGrade').value;
                const minimumTenure = document.getElementById('editMinimumTenure').value;
                const performanceThreshold = document.getElementById('editPerformanceThreshold').value;
                const requiresApproval = document.getElementById('editRequiresApproval').checked;
                
                // Job requirements
                const minEducation = document.getElementById('editMinEducation').value;
                const prefEducation = document.getElementById('editPrefEducation').value;
                const minExperience = document.getElementById('editMinExperience').value;
                const prefExperience = document.getElementById('editPrefExperience').value;
                
                // Tax bracket
                const taxBracket = document.getElementById('editTaxBracket').value;
                
                // Validate required fields
                if (!name || !code || !level || !baseSalary || !minSalary || !maxSalary) {
                    showError('Please fill all required fields');
                    return;
                }
                
                showLoading();
                
                const updateData = {
                    name,
                    code,
                    level,
                    description,
                    currency,
                    isActive,
                    effectiveDate: effectiveDate || new Date().toISOString(),
                    expiryDate: expiryDate || null,
                    baseSalary,
                    salaryRange: {
                        minimum: minSalary,
                        maximum: maxSalary
                    },
                    payrollSettings: {
                        payeePercent,
                        pensionPercent,
                        overtimeRate,
                        overtimeMultiplier
                    },
                    allowances: {
                        transport: transportAllowance,
                        housing: housingAllowance,
                        medical: medicalAllowance,
                        meals: mealsAllowance,
                        communication: communicationAllowance,
                        other: otherAllowance
                    },
                    taxBracket: {
                        bracket: taxBracket,
                        exemptionAmount: 0,
                        additionalTaxPercent: 0
                    },
                    promotion: {
                        nextGrade: nextGrade || null,
                        minimumTenure,
                        performanceThreshold,
                        requiresApproval
                    },
                    requirements: {
                        education: {
                            minimum: minEducation,
                            preferred: prefEducation || null
                        },
                        experience: {
                            minimum: minExperience,
                            preferred: prefExperience
                        },
                        certifications: [],
                        skills: []
                    }
                };
                
                axios.put(`/grades/${id}`, updateData)
                    .then(response => {
                        showSuccess('Grade updated successfully');
                        $('#editGradeModal').modal('hide');
                        loadGrades();
                        loadNextGrades(); // Refresh next grade list
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.error || 'Failed to update grade';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Open salary calculator
            function openSalaryCalculator(gradeId) {
                document.getElementById('calcGradeId').value = gradeId;
                document.getElementById('overtimeHours').value = 0;
                
                // Get grade details
                axios.get(`/grades/${gradeId}`)
                    .then(response => {
                        const grade = response.data;
                        
                        // Calculate salary with 0 overtime
                        axios.get(`/grades/${gradeId}/calculate-salary?overtime=0`)
                            .then(salaryResponse => {
                                const salaryDetails = salaryResponse.data;
                                
                                // Update calculator display
                                document.getElementById('calcBaseSalary').textContent = 
                                    formatCurrency(grade.baseSalary, grade.currency);
                                document.getElementById('calcAllowances').textContent = 
                                    formatCurrency(grade.totalAllowances, grade.currency);
                                document.getElementById('calcOvertime').textContent = 
                                    formatCurrency(salaryDetails.overtimePay, grade.currency);
                                document.getElementById('calcGrossSalary').textContent = 
                                    formatCurrency(salaryDetails.grossSalary, grade.currency);
                                document.getElementById('calcPaye').textContent = 
                                    formatCurrency(salaryDetails.deductions.paye, grade.currency);
                                document.getElementById('calcPension').textContent = 
                                    formatCurrency(salaryDetails.deductions.pension, grade.currency);
                                document.getElementById('calcAdditionalTax').textContent = 
                                    formatCurrency(salaryDetails.deductions.additionalTax, grade.currency);
                                document.getElementById('calcTotalDeductions').textContent = 
                                    formatCurrency(salaryDetails.deductions.total, grade.currency);
                                document.getElementById('calcNetSalary').textContent = 
                                    formatCurrency(salaryDetails.netSalary, grade.currency);
                                
                                $('#salaryCalculatorModal').modal('show');
                            })
                            .catch(error => {
                                console.error('Error calculating salary:', error);
                                showError('Failed to calculate salary');
                            });
                    })
                    .catch(error => {
                        console.error('Error loading grade:', error);
                        showError('Failed to load grade data');
                    });
            }
            
            // Confirm deactivate grade
            function confirmDeactivateGrade(gradeId) {
                document.getElementById('confirmationModalBody').innerHTML = `
                    <p>Are you sure you want to deactivate this grade?</p>
                    <p class="text-muted">Employees in this grade will need to be reassigned.</p>
                `;
                
                confirmActionBtn.onclick = () => {
                    $('#confirmationModal').modal('hide');
                    deactivateGrade(gradeId);
                };
                
                $('#confirmationModal').modal('show');
            }
            
            // Deactivate grade
            function deactivateGrade(gradeId) {
                showLoading();
                
                axios.patch(`/grades/${gradeId}/deactivate`)
                    .then(response => {
                        showSuccess('Grade deactivated successfully');
                        loadGrades();
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.error || 'Failed to deactivate grade';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Confirm activate grade
            function confirmActivateGrade(gradeId) {
                document.getElementById('confirmationModalBody').innerHTML = `
                    <p>Are you sure you want to activate this grade?</p>
                `;
                
                confirmActionBtn.onclick = () => {
                    $('#confirmationModal').modal('hide');
                    activateGrade(gradeId);
                };
                
                $('#confirmationModal').modal('show');
            }
            
            // Activate grade
            function activateGrade(gradeId) {
                showLoading();
                
                axios.put(`/grades/${gradeId}`, { isActive: true })
                    .then(response => {
                        showSuccess('Grade activated successfully');
                        loadGrades();
                    })
                    .catch(error => {
                        const errorMessage = error.response?.data?.error || 'Failed to activate grade';
                        showError(errorMessage);
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }
            
            // Perform confirmed action
            function performConfirmedAction() {
                // This is handled by the individual confirmation functions
            }
            
            // Helper function to format currency
            function formatCurrency(amount, currency) {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: currency || 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(amount);
            }
            
            // Show loading state
            function showLoading() {
                // Implement your loading indicator
                document.body.style.cursor = 'wait';
            }
            
            // Hide loading state
            function hideLoading() {
                document.body.style.cursor = 'default';
            }
            
            // Show success message
            function showSuccess(message) {
                // Implement your success notification
                alert('Success: ' + message);
            }
            
            // Show error message
            function showError(message) {
                // Implement your error notification
                alert('Error: ' + message);
            }
        });
    </script>
</body>
</html>