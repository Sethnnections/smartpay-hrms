<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>TPS - Payroll Management</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <!-- DataTables CSS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css"/>
  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css"/>
  <!-- Date Range Picker -->
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

  <link rel="stylesheet" href="/css/admin.css">
  <!-- Page-specific CSS -->
  <link rel="stylesheet" href="/css/departments.css">
  <style>

    
    
    /* Status badges */
    .badge-pending { background-color: #ffc107; color: #212529; }
    .badge-paid { background-color: #28a745; color: white; }
    .badge-rejected { background-color: #dc3545; color: white; }
    .badge-approved { background-color: #17a2b8; color: white; }
    
    /* Action buttons */
    .btn-action { padding: 0.25rem 0.5rem; font-size: 0.875rem; }
    
    /* Payslip preview modal */
    .payslip-preview { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
    .payslip-header { border-bottom: 2px solid var(--primary); padding-bottom: 15px; margin-bottom: 20px; }
    .payslip-footer { border-top: 1px solid #ddd; padding-top: 15px; margin-top: 20px; }
    
    /* Filter section */
    
    /* Date range picker customization */
    .daterangepicker { font-family: 'Inter', sans-serif; }
  </style>
</head>
<body>
  <!-- Sidebar Overlay -->
  <div class="sidebar-overlay" id="sidebarOverlay"></div>

  <!-- Sidebar -->
  <%- include('./partials/sidebar', { currentPage: 'payroll' }) %>

  <!-- Main -->
  <div class="main-content" id="mainContent">
    <%- include('./partials/header', { title: 'Payroll Management', user: typeof user !== 'undefined' ? user : { name: 'User' } }) %>

    <main class="dashboard-content py-1">
      <div class="container-fluid">
        <!-- Top: Summary + Action -->
        <div class="row mb-3">
          <div class="col-lg-9">
            <div class="row g-3">
              <div class="col-md-4">
                <div class="card card-animated p-3">
                  <div class="d-flex justify-content-between">
                    <div>
                      <small class="small-muted">Total Payrolls</small>
                      <h4 id="totalPayrolls" class="mb-0">0</h4>
                    </div>
                    <div class="align-self-center">
                      <i class="fa fa-file-invoice fa-2x text-primary"></i>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="card card-animated p-3">
                  <div class="d-flex justify-content-between">
                    <div>
                      <small class="small-muted">Processed Employees</small>
                      <h4 id="processedEmployees" class="mb-0">0</h4>
                    </div>
                    <div class="align-self-center">
                      <i class="fa fa-users fa-2x text-success"></i>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="card card-animated p-3">
                  <div class="d-flex justify-content-between">
                    <div>
                      <small class="small-muted">Pending Payments</small>
                      <h4 id="pendingPayments" class="mb-0">0</h4>
                    </div>
                    <div class="align-self-center">
                      <i class="fa fa-clock fa-2x text-warning"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="col-lg-3">
            <div class="card p-3 h-100">
              <div>
                <small class="small-muted">Quick Actions</small>
                <h6 class="mb-3">Generate payroll</h6>
                <div class="mb-2">
                  <label class="form-label">Payroll Month</label>
                  <input id="actionPayrollMonth" type="month" class="form-control" />
                </div>
                <div class="d-grid">
                  <button id="actionGenerateBtn" class="btn btn-primary btn-processing">
                    <span class="spinner-area d-none"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></span>
                    <i class="fa fa-cogs me-2"></i>
                    Generate Payroll
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Bank Instruction generator -->
        <div class="card mt-3 p-3">
          <div class="row g-2 align-items-end">
            <div class="col-md-3">
              <label class="form-label">Payroll Month</label>
              <input id="bankMonth" type="month" class="form-control" />
            </div>

            <div class="col-md-3">
              <label class="form-label">Or Start Date</label>
              <input id="bankStart" type="date" class="form-control" />
            </div>

            <div class="col-md-3">
              <label class="form-label">End Date</label>
              <input id="bankEnd" type="date" class="form-control" />
            </div>

            <div class="col-md-3 d-grid">
              <button id="downloadBankPdfBtn" class="btn btn-success">
                <i class="fa fa-download me-2"></i> Generate & Download Bank PDF
              </button>
            </div>
          </div>
        </div>

        <!-- Filters -->
        <div class="card mb-3 p-3 filter-card">
          <div class="row g-2 align-items-end">
            <div class="col-md-3">
              <label class="form-label">Date Range</label>
              <input type="text" id="dateRangeFilter" class="form-control" placeholder="Select date range">
            </div>

            <div class="col-md-2">
              <label class="form-label">Filter Month</label>
              <input id="filterMonth" type="month" class="form-control" />
            </div>

            <div class="col-md-2">
              <label class="form-label">Department</label>
              <select id="filterDepartment" class="form-select">
                <option value="">-- All Departments --</option>
                <!-- populated dynamically -->
              </select>
            </div>

            <div class="col-md-2">
              <label class="form-label">Status</label>
              <select id="filterStatus" class="form-select">
                <option value="">-- Any --</option>
                <option value="pending">Pending</option>
                <option value="paid">Paid</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
              </select>
            </div>

            <div class="col-md-3 d-grid gap-2 d-md-flex">
              <button id="applyFiltersBtn" class="btn btn-primary flex-fill">
                <i class="fa fa-filter me-1"></i> Apply Filters
              </button>
              <button id="clearFiltersBtn" class="btn btn-outline-secondary flex-fill">
                <i class="fa fa-times me-1"></i> Clear
              </button>
            </div>
          </div>
        </div>

        <!-- Table -->
        <div class="card p-3">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">Payroll Records</h5>
            <div class="btn-group">
              <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fa fa-download me-1"></i> Export
              </button>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item export-btn" data-type="excel" href="#"><i class="fa fa-file-excel text-success me-2"></i> Excel</a></li>
                <li><a class="dropdown-item export-btn" data-type="csv" href="#"><i class="fa fa-file-csv text-info me-2"></i> CSV</a></li>
                <li><a class="dropdown-item export-btn" data-type="pdf" href="#"><i class="fa fa-file-pdf text-danger me-2"></i> PDF</a></li>
              </ul>
            </div>
          </div>
          
          <div class="table-responsive">
            <table id="payrollTable" class="table table-striped table-hover" style="width:100%">
              <thead class="table-light">
                <tr>
                  <th>Employee</th>
                  <th>Employee ID</th>
                  <th>Department</th>
                  <th>Period</th>
                  <th>Gross</th>
                  <th>Net</th>
                  <th>Payment Status</th>
                  <th>Approval Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>

      </div>
    </main>
  </div>

  <!-- Payslip Preview Modal -->
  <div class="modal fade" id="payslipModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Payslip Preview</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="payslipPreviewContent" class="payslip-preview">
            <p class="text-center text-muted">Select a payroll record to preview payslip</p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="generatePayslipBtn">
            <i class="fa fa-file-pdf me-1"></i> Generate & Download
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- SCRIPTS: jQuery first -->
  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
  <!-- Bootstrap bundle -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

  <!-- DataTables + Buttons + dependencies -->
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>

  <!-- Date Range Picker -->
  <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>

  <!-- Utilities -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>

  <script>
    (function () {
      const token = localStorage.getItem('authToken');
      if (!token) {
        console.warn('No auth token found in localStorage under "authToken".');
        // Redirect to login if needed
      }

      // Helpers
      const authHeader = () => ({ Authorization: `Bearer ${token}` });
      const $generateBtn = $('#actionGenerateBtn');
      const $generateSpinner = $generateBtn.find('.spinner-area');

      let payrollTable;
      let selectedPayrollId = null;
      let dateRangeFilter = null;

      // Initialize Date Range Picker
      function initDateRangePicker() {
        $('#dateRangeFilter').daterangepicker({
          autoUpdateInput: false,
          locale: {
            cancelLabel: 'Clear',
            format: 'YYYY-MM-DD'
          },
          ranges: {
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'Last 3 Months': [moment().subtract(2, 'month').startOf('month'), moment().endOf('month')],
            'This Year': [moment().startOf('year'), moment().endOf('year')]
          }
        });

        $('#dateRangeFilter').on('apply.daterangepicker', function(ev, picker) {
          $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
          dateRangeFilter = {
            startDate: picker.startDate.format('YYYY-MM-DD'),
            endDate: picker.endDate.format('YYYY-MM-DD')
          };
        });

        $('#dateRangeFilter').on('cancel.daterangepicker', function(ev, picker) {
          $(this).val('');
          dateRangeFilter = null;
        });
      }

      // Initialize DataTable
      function initTable() {
        payrollTable = $('#payrollTable').DataTable({
          data: [],
          columns: [
            { 
              data: 'employeeId.personalInfo', 
              render: (p) => p ? `${p.firstName || ''} ${p.lastName || ''}` : 'N/A'
            },
            { data: 'employeeId.employeeId', defaultContent: 'N/A' },
            { 
              data: 'employeeId.employmentInfo.departmentId', 
              render: (dept) => dept ? dept.name : 'N/A'
            },
            { 
              data: null, 
              render: (data) => {
                if (data.payPeriod && data.payPeriod.startDate && data.payPeriod.endDate) {
                  return `${formatDate(data.payPeriod.startDate)} to ${formatDate(data.payPeriod.endDate)}`;
                }
                return data.payrollMonth || 'N/A';
              }
            },
            { 
              data: 'grossPay', 
              render: (v) => formatCurrency(v),
              className: 'text-end'
            },
            { 
              data: 'netPay', 
              render: (v) => formatCurrency(v),
              className: 'text-end fw-bold'
            },
            { 
              data: 'payment.status', 
              render: (s) => renderPaymentStatus(s),
              className: 'text-center'
            },
            { 
              data: null, 
              render: (data) => renderApprovalStatus(data),
              className: 'text-center'
            },
            { 
              data: null, 
              render: (data) => renderActionButtons(data),
              className: 'text-center',
              orderable: false
            }
          ],
          responsive: true,
          pageLength: 10,
          lengthMenu: [10, 25, 50, 100],
          order: [[3, 'desc']], // newest first by period
          dom: '<"top"f>rt<"bottom"lip><"clear">',
          language: {
            search: "Search:",
            searchPlaceholder: "Employee, department...",
            lengthMenu: "Show _MENU_ entries",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoEmpty: "Showing 0 to 0 of 0 entries",
            infoFiltered: "(filtered from _MAX_ total entries)",
            paginate: {
              first: "First",
              last: "Last",
              next: "Next",
              previous: "Previous"
            }
          }
        });
      }

      function formatCurrency(val) {
        if (val == null || isNaN(val)) return '-';
        return 'MK ' + Number(val).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
      }

      function formatDate(dateString) {
        if (!dateString) return 'N/A';
        return moment(dateString).format('DD MMM YYYY');
      }

      function renderPaymentStatus(status) {
        if (!status) return '<span class="badge bg-secondary">unknown</span>';
        const cls = {
          'pending': 'badge-pending',
          'paid': 'badge-paid',
          'failed': 'badge-rejected'
        }[status] || 'badge-secondary';
        return `<span class="badge ${cls}">${status}</span>`;
      }

      function renderApprovalStatus(data) {
        const hrStatus = data.approvals?.hr?.status || 'pending';
        const financeStatus = data.approvals?.finance?.status || 'pending';
        
        if (hrStatus === 'rejected' || financeStatus === 'rejected') {
          return '<span class="badge badge-rejected">Rejected</span>';
        }
        if (hrStatus === 'approved' && financeStatus === 'approved') {
          return '<span class="badge badge-approved">Approved</span>';
        }
        return '<span class="badge badge-pending">Pending</span>';
      }

      function renderActionButtons(data) {
        let buttons = `
          <button class="btn btn-sm btn-outline-primary btn-action view-payslip" data-id="${data._id}" title="View Payslip">
            <i class="fa fa-eye"></i>
          </button>
        `;
        
        // Add approve/reject buttons for HR/Admin
        if (['admin', 'hr', 'finance'].includes(userRole)) {
          if (data.approvals?.hr?.status !== 'approved' && ['admin', 'hr'].includes(userRole)) {
            buttons += `
              <button class="btn btn-sm btn-outline-success btn-action approve-payroll" data-id="${data._id}" data-type="hr" title="Approve (HR)">
                <i class="fa fa-check"></i>
              </button>
            `;
          }
          
          if (data.approvals?.finance?.status !== 'approved' && ['admin', 'finance'].includes(userRole)) {
            buttons += `
              <button class="btn btn-sm btn-outline-success btn-action approve-payroll" data-id="${data._id}" data-type="finance" title="Approve (Finance)">
                <i class="fa fa-check-circle"></i>
              </button>
            `;
          }
          
          if (data.payment?.status !== 'paid') {
            buttons += `
              <button class="btn btn-sm btn-outline-info btn-action mark-paid" data-id="${data._id}" title="Mark as Paid">
                <i class="fa fa-money-bill"></i>
              </button>
            `;
          }
        }
        
        return `<div class="btn-group">${buttons}</div>`;
      }

      // Fetch departments for filter
      async function loadDepartments() {
        try {
          const res = await axios.get('/api/departments', { headers: authHeader() });
          const departments = Array.isArray(res.data) ? res.data : res.data.departments ?? [];
          const $select = $('#filterDepartment');
          $select.empty().append('<option value="">-- All Departments --</option>');
          departments.forEach(d => {
            $select.append(`<option value="${d._id}">${escapeHtml(d.name)} (${escapeHtml(d.code)})</option>`);
          });
        } catch (err) {
          console.error('Failed to load departments', err);
          Swal.fire({ 
            icon: 'warning', 
            title: 'Departments', 
            text: 'Could not load departments for filters',
            timer: 2500, 
            toast: true, 
            position: 'top-end', 
            showConfirmButton: false
          });
        }
      }

      // Fetch payrolls with filters
      async function loadPayrolls(filters = {}) {
        try {
          Swal.fire({ 
            title: 'Loading payrolls...', 
            didOpen: () => Swal.showLoading(), 
            allowOutsideClick: false, 
            showConfirmButton: false 
          });
          
          // Build query params
          const params = new URLSearchParams();
          if (filters.month) params.append('month', filters.month);
          if (filters.department) params.append('departmentId', filters.department);
          if (filters.status) params.append('paymentStatus', filters.status);
          if (filters.startDate && filters.endDate) {
            params.append('startDate', filters.startDate);
            params.append('endDate', filters.endDate);
          }
          
          const queryString = params.toString();
          const url = `/api/payroll/${queryString ? `?${queryString}` : ''}`;
          
          const res = await axios.get(url, { headers: authHeader() });
          Swal.close();

          const payrolls = res.data?.payrolls ?? [];

          // Update summary cards
          $('#totalPayrolls').text(res.data?.pagination?.totalRecords ?? payrolls.length);
          $('#processedEmployees').text(payrolls.length);
          $('#pendingPayments').text(payrolls.filter(p => p.payment?.status === 'pending').length);

          // Replace DataTable data
          payrollTable.clear();
          payrollTable.rows.add(payrolls);
          payrollTable.draw();
        } catch (err) {
          console.error('Failed to load payrolls', err);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to load payrolls' });
        }
      }

      // Generate payroll for a month
      let isGenerating = false;
      async function generatePayrollForMonth(month) {
        if (!month) return Swal.fire('Validation', 'Please select a payroll month', 'warning');

        if (isGenerating) return;
        isGenerating = true;
        $generateBtn.prop('disabled', true);
        $generateSpinner.removeClass('d-none');
        $generateBtn.addClass('disabled');

        try {
          Swal.fire({ 
            title: 'Processing payroll', 
            html: `Generating payroll for <strong>${month}</strong>...`, 
            didOpen: () => Swal.showLoading(), 
            allowOutsideClick: false 
          });
          
          const res = await axios.post('/api/payroll/process', { month }, { headers: authHeader() });

          Swal.close();
          isGenerating = false;
          $generateBtn.prop('disabled', false);
          $generateSpinner.addClass('d-none');
          $generateBtn.removeClass('disabled');

          const data = res.data;
          if (data?.success) {
            const processed = data.processedCount ?? 0;
            if (processed > 0) {
              Swal.fire({ 
                icon: 'success', 
                title: 'Payroll Processed', 
                text: `${data.message} (${processed} employees)`,
                timer: 3500 
              });
            } else {
              Swal.fire({ 
                icon: 'info', 
                title: 'No Changes', 
                text: data.message ?? 'No employees were processed for that month.'
              });
            }
            // reload payrolls
            await loadPayrolls();
          } else {
            Swal.fire({ 
              icon: 'warning', 
              title: 'Processing result', 
              text: data?.message ?? 'Payroll API returned non-success' 
            });
          }
        } catch (err) {
          console.error('Payroll generation failed', err);
          isGenerating = false;
          $generateBtn.prop('disabled', false);
          $generateSpinner.addClass('d-none');
          $generateBtn.removeClass('disabled');

          const serverMessage = err?.response?.data?.message;
          Swal.fire({ 
            icon: 'error', 
            title: 'Failed', 
            text: serverMessage ?? 'Payroll processing failed' 
          });
        }
      }

      // Preview payslip
      async function previewPayslip(payrollId) {
        try {
          Swal.fire({ 
            title: 'Loading payslip...', 
            didOpen: () => Swal.showLoading(), 
            allowOutsideClick: false, 
            showConfirmButton: false 
          });
          
          const res = await axios.get(`/api/payroll/${payrollId}`, { headers: authHeader() });
          const payroll = res.data;
          
          // Simple payslip preview
          const previewHtml = `
            <div class="payslip-header text-center">
              <img src="/logo.png" alt="Company Logo" style="height: 60px; margin-bottom: 10px;">
              <h4>Team Pay</h4>
              <p class="mb-0">Umoyo Building, Blantyre, Malawi</p>
              <p class="mb-0"><strong>Bank:</strong> National Bank of Malawi</p>
              <p class="mb-0"><strong>Account:</strong> 123456789012</p>
              <h5 class="mt-2">PAYSLIP</h5>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <strong>Employee:</strong> ${payroll.employeeId?.personalInfo ? 
                  `${payroll.employeeId.personalInfo.firstName} ${payroll.employeeId.personalInfo.lastName}` : 'N/A'}<br>
                <strong>Employee ID:</strong> ${payroll.employeeId?.employeeId || 'N/A'}<br>
                <strong>Department:</strong> ${payroll.employeeId?.employmentInfo?.departmentId?.name || 'N/A'}
              </div>
              <div class="col-md-6 text-end">
                <strong>Pay Period:</strong> ${payroll.payrollMonth || 'N/A'}<br>
                <strong>Payment Date:</strong> ${payroll.payment?.paidAt ? 
                  moment(payroll.payment.paidAt).format('DD MMM YYYY') : 'Pending'}<br>
                <strong>Status:</strong> ${renderPaymentStatus(payroll.payment?.status)}
              </div>
            </div>
            
            <div class="row">
              <div class="col-md-6">
                <div class="card mb-3">
                  <div class="card-header bg-light">
                    <strong>Earnings</strong>
                  </div>
                  <div class="card-body p-2">
                    <table class="table table-sm mb-0">
                      <tr>
                        <td>Basic Salary:</td>
                        <td class="text-end">${formatCurrency(payroll.salary?.prorated)}</td>
                      </tr>
                      <tr>
                        <td>Allowances:</td>
                        <td class="text-end">${formatCurrency(payroll.allowances?.total)}</td>
                      </tr>
                      <tr>
                        <td>Overtime:</td>
                        <td class="text-end">${formatCurrency(payroll.overtime?.amount)}</td>
                      </tr>
                      <tr>
                        <td>Bonuses:</td>
                        <td class="text-end">${formatCurrency(payroll.bonuses?.total)}</td>
                      </tr>
                      <tr class="table-primary">
                        <td><strong>Gross Pay:</strong></td>
                        <td class="text-end"><strong>${formatCurrency(payroll.grossPay)}</strong></td>
                      </tr>
                    </table>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="card mb-3">
                  <div class="card-header bg-light">
                    <strong>Deductions</strong>
                  </div>
                  <div class="card-body p-2">
                    <table class="table table-sm mb-0">
                      <tr>
                        <td>Tax:</td>
                        <td class="text-end">${formatCurrency(payroll.deductions?.tax?.amount)}</td>
                      </tr>
                      <tr>
                        <td>Pension:</td>
                        <td class="text-end">${formatCurrency(payroll.deductions?.pension?.amount)}</td>
                      </tr>
                      <tr>
                        <td>Loans:</td>
                        <td class="text-end">${formatCurrency(payroll.deductions?.loans?.reduce((sum, loan) => sum + loan.amount, 0))}</td>
                      </tr>
                      <tr>
                        <td>Other:</td>
                        <td class="text-end">${formatCurrency(payroll.deductions?.other?.reduce((sum, item) => sum + item.amount, 0))}</td>
                      </tr>
                      <tr class="table-primary">
                        <td><strong>Total Deductions:</strong></td>
                        <td class="text-end"><strong>${formatCurrency(payroll.deductions?.total)}</strong></td>
                      </tr>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="payslip-footer">
              <div class="row">
                <div class="col-md-6">
                  <strong>Payment Method:</strong> ${payroll.payment?.method || 'N/A'}<br>
                  <strong>Reference:</strong> ${payroll.payment?.reference || 'N/A'}
                </div>
                <div class="col-md-6 text-end">
                  <h4>Net Pay: ${formatCurrency(payroll.netPay)}</h4>
                </div>
              </div>
            </div>
          `;
          
          $('#payslipPreviewContent').html(previewHtml);
          selectedPayrollId = payrollId;
          $('#payslipModal').modal('show');
          
          Swal.close();
        } catch (err) {
          console.error('Failed to load payslip', err);
          Swal.fire({ 
            icon: 'error', 
            title: 'Error', 
            text: 'Failed to load payslip details' 
          });
        }
      }

      // Generate and download payslip PDF
      async function generatePayslipPDF(payrollId) {
        try {
          Swal.fire({ 
            title: 'Generating PDF...', 
            didOpen: () => Swal.showLoading(), 
            allowOutsideClick: false 
          });
          
          // This would call your backend endpoint to generate the PDF
          const response = await axios.get(`/api/payroll/${payrollId}/payslip?download=true`, {
            headers: authHeader(),
            responseType: 'blob'
          });
          
          Swal.close();
          
          // Create a blob from the PDF stream
          const blob = new Blob([response.data], { type: 'application/pdf' });
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `payslip_${payrollId}.pdf`;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(url);
          
          Swal.fire({ 
            icon: 'success', 
            title: 'Download Complete', 
            text: 'Payslip PDF has been downloaded',
            timer: 2000,
            toast: true,
            position: 'top-end'
          });
        } catch (err) {
          console.error('Failed to generate PDF', err);
          Swal.fire({ 
            icon: 'error', 
            title: 'Error', 
            text: 'Failed to generate PDF' 
          });
        }
      }

      // Approve payroll
      async function approvePayroll(payrollId, type) {
        try {
          const { value: notes } = await Swal.fire({
            title: `Approve Payroll (${type.toUpperCase()})`,
            input: 'textarea',
            inputLabel: 'Approval Notes (optional)',
            inputPlaceholder: 'Enter any notes here...',
            showCancelButton: true,
            confirmButtonText: 'Approve',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
              // No validation needed, notes are optional
              return null;
            }
          });
          
          if (notes !== undefined) {
            Swal.fire({ 
              title: 'Approving...', 
              didOpen: () => Swal.showLoading(), 
              allowOutsideClick: false 
            });
            
            await axios.patch(`/api/payroll/${payrollId}/approve`, {
              type,
              notes
            }, { headers: authHeader() });
            
            Swal.fire({ 
              icon: 'success', 
              title: 'Approved', 
              text: `Payroll has been approved by ${type}`,
              timer: 2000 
            });
            
            // Reload the payroll data
            await loadPayrolls(getCurrentFilters());
          }
        } catch (err) {
          console.error('Failed to approve payroll', err);
          Swal.fire({ 
            icon: 'error', 
            title: 'Error', 
            text: 'Failed to approve payroll' 
          });
        }
      }

      // Mark as paid
      async function markAsPaid(payrollId) {
        try {
          const { value: formValues } = await Swal.fire({
            title: 'Mark as Paid',
            html:
              '<input id="swal-ref" class="swal2-input" placeholder="Payment Reference">' +
              '<select id="swal-method" class="swal2-input">' +
              '  <option value="bank_transfer">Bank Transfer</option>' +
              '  <option value="mobile_money">Mobile Money</option>' +
              '  <option value="cash">Cash</option>' +
              '  <option value="cheque">Cheque</option>' +
              '</select>',
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: 'Mark as Paid',
            cancelButtonText: 'Cancel',
            preConfirm: () => {
              return {
                reference: document.getElementById('swal-ref').value,
                method: document.getElementById('swal-method').value
              };
            }
          });
          
          if (formValues) {
            Swal.fire({ 
              title: 'Updating...', 
              didOpen: () => Swal.showLoading(), 
              allowOutsideClick: false 
            });
            
            await axios.patch(`/api/payroll/${payrollId}/mark-paid`, formValues, { headers: authHeader() });
            
            Swal.fire({ 
              icon: 'success', 
              title: 'Updated', 
              text: 'Payroll has been marked as paid',
              timer: 2000 
            });
            
            // Reload the payroll data
            await loadPayrolls(getCurrentFilters());
          }
        } catch (err) {
          console.error('Failed to mark as paid', err);
          Swal.fire({ 
            icon: 'error', 
            title: 'Error', 
            text: 'Failed to mark payroll as paid' 
          });
        }
      }

      // Get current filter values
      function getCurrentFilters() {
        return {
          month: $('#filterMonth').val(),
          department: $('#filterDepartment').val(),
          status: $('#filterStatus').val(),
          startDate: dateRangeFilter ? dateRangeFilter.startDate : null,
          endDate: dateRangeFilter ? dateRangeFilter.endDate : null
        };
      }

      // Apply filters
      function applyFilters() {
        const filters = getCurrentFilters();
        loadPayrolls(filters);
      }

      // Clear filters
      function clearFilters() {
        $('#filterMonth').val('');
        $('#filterDepartment').val('');
        $('#filterStatus').val('');
        $('#dateRangeFilter').val('');
        dateRangeFilter = null;
        loadPayrolls();
      }

      // Escapes simple html to avoid injection
      function escapeHtml(s) {
        if (!s) return '';
        return s.replace(/[&<>"'`=\/]/g, function (c) {
          return {
            '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;',
            '/': '&#x2F;', '=': '&#x3D;', '`': '&#x60;'
          }[c];
        });
      }

      // Hook UI events
      function bindUI() {
        // Apply filters when button is clicked
        $('#applyFiltersBtn').on('click', applyFilters);
        
        // Clear filters
        $('#clearFiltersBtn').on('click', clearFilters);
        
        // Generate payroll
        $('#actionGenerateBtn').on('click', async function () {
          const month = $('#actionPayrollMonth').val() || $('#filterMonth').val();
          await generatePayrollForMonth(month);
        });

        // View payslip
        $(document).on('click', '.view-payslip', function() {
          const payrollId = $(this).data('id');
          previewPayslip(payrollId);
        });

        // Generate PDF from modal
        $('#generatePayslipBtn').on('click', function() {
          if (selectedPayrollId) {
            generatePayslipPDF(selectedPayrollId);
          }
        });

        // Approve payroll
        $(document).on('click', '.approve-payroll', function() {
          const payrollId = $(this).data('id');
          const type = $(this).data('type');
          approvePayroll(payrollId, type);
        });

        // Mark as paid
        $(document).on('click', '.mark-paid', function() {
          const payrollId = $(this).data('id');
          markAsPaid(payrollId);
        });

        // Export buttons
        $('.export-btn').on('click', function(e) {
          e.preventDefault();
          const type = $(this).data('type');
          
          // Trigger DataTable export
          if (type === 'excel') {
            payrollTable.button('.buttons-excel').trigger();
          } else if (type === 'csv') {
            payrollTable.button('.buttons-csv').trigger();
          } else if (type === 'pdf') {
            payrollTable.button('.buttons-pdf').trigger();
          }
        });
        
        // Download bank instruction PDF
        $('#downloadBankPdfBtn').on('click', async function () {
          const month = $('#bankMonth').val();
          const startDate = $('#bankStart').val();
          const endDate = $('#bankEnd').val();

          if (!month && !(startDate && endDate)) {
            Swal.fire('Validation', 'Select a payroll month OR a start and end date', 'warning');
            return;
          }

          const payload = month ? { month } : { startDate, endDate };

          try {
            Swal.fire({ title: 'Generating PDF...', didOpen: () => Swal.showLoading(), allowOutsideClick: false });
            const response = await axios.post('/api/payroll/bank-instruction', payload, {
              headers: { Authorization: `Bearer ${token}` },
              responseType: 'blob',
              timeout: 120000
            });
            Swal.close();

            const blob = new Blob([response.data], { type: 'application/pdf' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            const label = month ? month : `${startDate}_to_${endDate}`;
            a.href = url;
            a.download = `bank_instruction_${label}.pdf`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url);

            Swal.fire({ icon: 'success', title: 'Downloaded', text: 'Bank instruction PDF downloaded.' });
          } catch (err) {
            Swal.close();
            let msg = 'Failed to generate PDF';
            try {
              const reader = new FileReader();
              reader.onload = function () {
                try {
                  const json = JSON.parse(reader.result);
                  if (json && json.error) msg = json.error;
                } catch (e) { /* not JSON */ }
                Swal.fire('Error', msg, 'error');
              };
              if (err.response && err.response.data) {
                reader.readAsText(err.response.data);
              } else {
                Swal.fire('Error', msg, 'error');
              }
            } catch (e) {
              Swal.fire('Error', 'Failed to generate PDF', 'error');
            }
          }
        });
      }

      // Get user role from your authentication system
      // This is a placeholder - you'll need to implement based on your auth system
      const userRole = 'admin'; // Replace with actual user role

      // INIT
      $(document).ready(async function () {
        initDateRangePicker();
        initTable();
        await loadDepartments();
        await loadPayrolls();
        bindUI();
      });

    })();
  </script>

  <!-- optional custom admin script -->
  <script src="/js/admin.js"></script>
</body>
</html>